{"componentChunkName":"component---src-templates-docs-js","path":"/Nlvsc1sasBkNlxefDKo3","result":{"data":{"site":{"siteMetadata":{"title":"My BooGi App","docsLocation":"","docsLocationType":"","editable":true}},"mdx":{"fields":{"id":"50a03499-cea4-5fc8-a19c-d9aacb0bdb93","title":"Event Logger","slug":"/Nlvsc1sasBkNlxefDKo3"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Event Logger\",\n  \"editable\": false\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"div\", {\n    align: \"center\",\n    style: {\n      \"backgroundColor\": \"#e5ecff\"\n    }\n  }, \"    \", mdx(\"br\", null), \"    \", mdx(\"div\", null, \"DOC\"), \"    \", mdx(\"h1\", null, \"Event Logger\"), \"    \", mdx(\"br\", null), \"  \"), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Files Used:\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 src/shared/event-logger/logger-schema.ts\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 src/shared/event-logger/swimm-events.ts\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 src/shared/event-logger/event-logger.ts\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 cloud/firestore.rules\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 src/app/common/mixins/event-logger.js\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 src/app/common/components/organisms/PlaylistCard.vue\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 src/app/common/mixins/storeModulesWrapper.js\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 src/cli/utils/cli-utils.ts\"), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In our app (and in our CLI), we dispatch some interesting events to Firestore. For example, when a user is creating a new resource, inviting another user or joining a repo - we would like to get a notification for that, right? :)\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The events are stored in Firestore under the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"event_logs\"), \" collection and later displayed in our admin dashboard.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To avoid security errors on sending the events we use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://joi.dev/\"\n  }), \"Joi\"), \" package that validates the structure and content of the event message by a pre-defined json schema ( \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"src/shared/event-logger/logger-schema.ts \\u2713\"), \" ) that reflects the related security rule.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If an event message fails on validation, we send an error to the local error log for later investigation\"), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The event message schema (validated by Joi) is defined in this file. Note that some of the fields are mandatory and some are optional.\\nNote that this schema should be aligned with the firebase security rule of the event-logger. It's not updated automatically for now, so whenever updating one of the values - remember to update also the related security rule.\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/shared/event-logger/logger-schema.ts  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"\\uD83D\\uDFE9 1      import * as Joi from 'joi';\\n\\uD83D\\uDFE9 2      \\n\\uD83D\\uDFE9 3      export const eventSchema = Joi.object().keys({\\n\\uD83D\\uDFE9 4        // if a field is not `.required` - then it's optional\\n\\uD83D\\uDFE9 5        swimmEventCode: Joi.string().required(),\\n\\uD83D\\uDFE9 6        message: Joi.string(),\\n\\uD83D\\uDFE9 7        value: Joi.string(),\\n\\uD83D\\uDFE9 8        category: Joi.string().default('USER_ACTION'),\\n\\uD83D\\uDFE9 9        userId: Joi.string().required(),\\n\\uD83D\\uDFE9 10       userName: Joi.string().required(),\\n\\uD83D\\uDFE9 11       actionName: Joi.string().required(), // i.e. \\\"clicked help\\\", \\\"created a unit\\\" ,\\\"initialized a repo\\\"\\n\\uD83D\\uDFE9 12       app_version: Joi.string().required(),\\n\\uD83D\\uDFE9 13       workspaceId: Joi.string(),\\n\\uD83D\\uDFE9 14       workspaceName: Joi.string().allow(''),\\n\\uD83D\\uDFE9 15       repoId: Joi.string(),\\n\\uD83D\\uDFE9 16       repoName: Joi.string().allow(''),\\n\\uD83D\\uDFE9 17       playlistId: Joi.string(),\\n\\uD83D\\uDFE9 18       playlistName: Joi.string().allow(''),\\n\\uD83D\\uDFE9 19       planId: Joi.string(),\\n\\uD83D\\uDFE9 20       planName: Joi.string().allow(''),\\n\\uD83D\\uDFE9 21       // src and target: i.e added a unit to playlist unitId is srcId and playlist id is targetId\\n\\uD83D\\uDFE9 22       srcId: Joi.string(), // optional: the id of the resource in action\\n\\uD83D\\uDFE9 23       srcName: Joi.string(), // optional: the name of the resource in action\\n\\uD83D\\uDFE9 24       srcType: Joi.string(), // optional: the type of the resource in action\\n\\uD83D\\uDFE9 25       targetId: Joi.string(), // optional: the id of the resource the action targets\\n\\uD83D\\uDFE9 26       targetName: Joi.string(), // optional: the name of the resource the action targets\\n\\uD83D\\uDFE9 27     });\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"These are the event codes that we support in Swimm. In order to add a new event you should add it here\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/shared/event-logger/swimm-events.ts  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"\\uD83D\\uDFE9 1      export const SWIMM_EVENTS = {\\n\\uD83D\\uDFE9 2        // GENERAL ACTIONS\\n\\uD83D\\uDFE9 3        UNKNOWN: { code: 'UNKNOWN', description: 'Unknown Event' },\\n\\uD83D\\uDFE9 4        ERROR: { code: 'ERROR', description: 'Error' },\\n\\uD83D\\uDFE9 5      \\n\\uD83D\\uDFE9 6        // ACTIONS ON RESOURCES IN REPO\\n\\uD83D\\uDFE9 7        EXERCISE_CREATED: { code: 'EXERCISE_CREATED', description: 'Created an Exercise' },\\n\\uD83D\\uDFE9 8        EXERCISE_DELETED: { code: 'EXERCISE_DELETED', description: 'Deleted an Exercise' },\\n\\uD83D\\uDFE9 9        EXERCISE_UPDATED: { code: 'EXERCISE_UPDATED', description: 'Updated an Exercise' },\\n\\uD83D\\uDFE9 10       EXTERNAL_LINK_CREATED: { code: 'EXTERNAL_LINK_CREATED', description: 'Created an external link' },\\n\\uD83D\\uDFE9 11       EXTERNAL_LINK_DELETED: { code: 'EXTERNAL_LINK_DELETED', description: 'Deleted an external link' },\\n\\uD83D\\uDFE9 12       EXTERNAL_LINK_UPDATED: { code: 'EXTERNAL_LINK_UPDATED', description: 'Updated an external link' },\\n\\uD83D\\uDFE9 13       PLAYLIST_CREATED: { code: 'PLAYLIST_CREATED', description: 'Created a Playlist' },\\n\\uD83D\\uDFE9 14       PLAYLIST_DELETED: { code: 'PLAYLIST_DELETED', description: 'Deleted a Playlist' },\\n\\uD83D\\uDFE9 15       PLAYLIST_UPDATED: { code: 'PLAYLIST_UPDATED', description: 'Updated a Playlist' },\\n\\uD83D\\uDFE9 16       DOC_CREATED: { code: 'DOC_CREATED', description: 'Created a Doc' },\\n\\uD83D\\uDFE9 17       DOC_CREATED_FROM_SUGGESTION: { code: 'DOC_CREATED_FROM_SUGGESTION', description: 'Created a Doc out of a suggestion' },\\n\\uD83D\\uDFE9 18       DOC_DELETED: { code: 'DOC_DELETED', description: 'Deleted a Doc' },\\n\\uD83D\\uDFE9 19       DOC_UPDATED: { code: 'DOC_UPDATED', description: 'Updated a Doc' },\\n\\uD83D\\uDFE9 20     \\n\\uD83D\\uDFE9 21       // ACTIONS ON REPO\\n\\uD83D\\uDFE9 22       REPOSITORY_CREATED: { code: 'REPOSITORY_CREATED', description: 'Created Repository' },\\n\\uD83D\\uDFE9 23       REPOSITORY_UPDATED: { code: 'REPOSITORY_UPDATED', description: 'Updated Repository' },\\n\\uD83D\\uDFE9 24       REPOSITORY_DELETED: { code: 'REPOSITORY_DELETED', description: 'Deleted Repository' },\\n\\uD83D\\uDFE9 25       SWIMMER_SUBSCRIBED_TO_REPOSITORY: {\\n\\uD83D\\uDFE9 26         code: 'SWIMMER_SUBSCRIBED_TO_REPOSITORY',\\n\\uD83D\\uDFE9 27         description: 'a Swimmer joined the Repository',\\n\\uD83D\\uDFE9 28       },\\n\\uD83D\\uDFE9 29       SWIMMER_UNSUBSCRIBED_FROM_REPOSITORY: {\\n\\uD83D\\uDFE9 30         code: 'SWIMMER_UNSUBSCRIBED_FROM_REPOSITORY',\\n\\uD83D\\uDFE9 31         description: 'a Swimmer unsubscribed from the Repository',\\n\\uD83D\\uDFE9 32       },\\n\\uD83D\\uDFE9 33       LIFEGUARD_SUBSCRIBED_TO_REPOSITORY: {\\n\\uD83D\\uDFE9 34         code: 'LIFEGUARD_SUBSCRIBED_TO_REPOSITORY',\\n\\uD83D\\uDFE9 35         description: 'a Lifeguard joined the Repository',\\n\\uD83D\\uDFE9 36       },\\n\\uD83D\\uDFE9 37       LIFEGUARD_UNSUBSCRIBED_FROM_REPOSITORY: {\\n\\uD83D\\uDFE9 38         code: 'LIFEGUARD_UNSUBSCRIBED_FROM_REPOSITORY',\\n\\uD83D\\uDFE9 39         description: 'a Lifeguard unsubscribed from the Repository',\\n\\uD83D\\uDFE9 40       },\\n\\uD83D\\uDFE9 41       LIFEGUARD_DEMOTED_TO_SWIMMER: {\\n\\uD83D\\uDFE9 42         code: 'LIFEGUARD_DEMOTED_TO_SWIMMER',\\n\\uD83D\\uDFE9 43         description: 'A Lifeguard was demoted to Swimmer role by another Lifeguard',\\n\\uD83D\\uDFE9 44       },\\n\\uD83D\\uDFE9 45       SWIMMER_PROMOTED_TO_LIFEGUARD: {\\n\\uD83D\\uDFE9 46         code: 'SWIMMER_PROMOTED_TO_LIFEGUARD',\\n\\uD83D\\uDFE9 47         description: 'A Swimmer was promoted to Lifeguard role by another Lifeguard',\\n\\uD83D\\uDFE9 48       },\\n\\uD83D\\uDFE9 49       REPOSITORY_MD_EXPORT_ENABLED: { code: 'REPOSITORY_MD_EXPORT_ENABLED', description: 'Enable MD export for repository' },\\n\\uD83D\\uDFE9 50       REPOSITORY_MD_EXPORT_DISABLED: { code: 'REPOSITORY_MD_EXPORT_DISABLED', description: 'Disabled MD export for repository' },\\n\\uD83D\\uDFE9 51     \\n\\uD83D\\uDFE9 52       OPENED_REPOSITORY_INTEGRATIONS: { code: 'OPENED_REPOSITORY_INTEGRATIONS', description: 'Viewed integrations page' },\\n\\uD83D\\uDFE9 53     \\n\\uD83D\\uDFE9 54       // SWIMMER_STATUS (PROGRESS) CHANGES\\n\\uD83D\\uDFE9 55       PLAYLIST_SWIMMER_STATUS_CREATED: { code: 'PLAYLIST_SWIMMER_STATUS_CREATED', description: 'Playlist swimmer`s status created' },\\n\\uD83D\\uDFE9 56       PLAYLIST_SWIMMER_STATUS_DELETED: { code: 'PLAYLIST_SWIMMER_STATUS_DELETED', description: 'Playlist swimmer`s status deleted' },\\n\\uD83D\\uDFE9 57       PLAYLIST_SWIMMER_STATUS_UPDATED: { code: 'PLAYLIST_SWIMMER_STATUS_UPDATED', description: 'Playlist swimmer`s status updated' },\\n\\uD83D\\uDFE9 58       EXERCISE_SWIMMER_STATUS_UPDATED: { code: 'EXERCISE_SWIMMER_STATUS_UPDATED', description: 'Exercise swimmer`s status updated' },\\n\\uD83D\\uDFE9 59       DOC_SWIMMER_STATUS_UPDATED: { code: 'DOC_SWIMMER_STATUS_UPDATED', description: 'Doc swimmer`s status updated' },\\n\\uD83D\\uDFE9 60       EXTERNAL_LINK_SWIMMER_STATUS_CREATED: { code: 'EXTERNAL_LINK_SWIMMER_STATUS_CREATED', description: 'External link swimmer`s status created' },\\n\\uD83D\\uDFE9 61       EXTERNAL_LINK_SWIMMER_STATUS_DELETED: { code: 'EXTERNAL_LINK_SWIMMER_STATUS_DELETED', description: 'External link swimmer`s status deleted' },\\n\\uD83D\\uDFE9 62       EXTERNAL_LINK_SWIMMER_STATUS_UPDATED: { code: 'EXTERNAL_LINK_SWIMMER_STATUS_UPDATED', description: 'External link swimmer`s status updated' },\\n\\uD83D\\uDFE9 63     \\n\\uD83D\\uDFE9 64       // USER ACTIONS\\n\\uD83D\\uDFE9 65       USER_INVITED: { code: 'USER_INVITED', description: 'User invited a new person to the workspace' },\\n\\uD83D\\uDFE9 66       USER_SIGN_IN: { code: 'USER_SIGN_IN', description: 'User signed in' },\\n\\uD83D\\uDFE9 67       USER_SIGN_OUT: { code: 'USER_SIGN_OUT', description: 'User signed out' },\\n\\uD83D\\uDFE9 68       USER_RESET_PASSWORD: { code: 'USER_RESET_PASSWORD', description: 'User asked to reset password' },\\n\\uD83D\\uDFE9 69     \\n\\uD83D\\uDFE9 70       // GLOBAL ACTIONS\\n\\uD83D\\uDFE9 71       USER_RATED_US: { code: 'USER_RATED_US', description: 'User gave us rating' },\\n\\uD83D\\uDFE9 72     \\n\\uD83D\\uDFE9 73       // WORKSPACES ACTIONS\\n\\uD83D\\uDFE9 74       WORKSPACE_CREATED: { code: 'WORKSPACE_CREATED', description: 'Created a Workspace' },\\n\\uD83D\\uDFE9 75       WORKSPACE_DELETED: { code: 'WORKSPACE_DELETED', description: 'Deleted a Workspace' },\\n\\uD83D\\uDFE9 76       WORKSPACE_UPDATED: { code: 'WORKSPACE_UPDATED', description: 'Updated a Workspace' },\\n\\uD83D\\uDFE9 77       WORKSPACE_USER_JOINED_WORKSPACE: {\\n\\uD83D\\uDFE9 78         code: 'WORKSPACE_USER_JOINED_WORKSPACE',\\n\\uD83D\\uDFE9 79         description: 'a user joined the workspace',\\n\\uD83D\\uDFE9 80       },\\n\\uD83D\\uDFE9 81       WORKSPACE_USER_UNSUBSCRIBED_WORKSPACE: {\\n\\uD83D\\uDFE9 82         code: 'WORKSPACE_USER_UNSUBSCRIBED_WORKSPACE',\\n\\uD83D\\uDFE9 83         description: 'a workspace user has been unsubscribed from the workspace',\\n\\uD83D\\uDFE9 84       },\\n\\uD83D\\uDFE9 85       WORKSPACE_ADMIN_JOINED_WORKSPACE: {\\n\\uD83D\\uDFE9 86         code: 'WORKSPACE_ADMIN_JOINED_WORKSPACE',\\n\\uD83D\\uDFE9 87         description: 'a workspace admin joined the workspace',\\n\\uD83D\\uDFE9 88       },\\n\\uD83D\\uDFE9 89       WORKSPACE_ADMIN_UNSUBSCRIBED_WORKSPACE: {\\n\\uD83D\\uDFE9 90         code: 'WORKSPACE_ADMIN_UNSUBSCRIBED_WORKSPACE',\\n\\uD83D\\uDFE9 91         description: 'a  workspace admin has been unsubscribed from the workspace',\\n\\uD83D\\uDFE9 92       },\\n\\uD83D\\uDFE9 93     \\n\\uD83D\\uDFE9 94       WORKSPACE_ADMIN_DEMOTED_TO_WORKSPACE_USER: {\\n\\uD83D\\uDFE9 95         code: 'WORKSPACE_ADMIN_DEMOTED_TO_WORKSPACE_USER',\\n\\uD83D\\uDFE9 96         description: 'A Workspace Admin was demoted to Workspace User role by another Workspace Admon',\\n\\uD83D\\uDFE9 97       },\\n\\uD83D\\uDFE9 98       WORKSPACE_USER_PROMOTED_TO_WORKSPACE_ADMIN: {\\n\\uD83D\\uDFE9 99         code: 'WORKSPACE_USER_PROMOTED_TO_WORKSPACE_ADMIN',\\n\\uD83D\\uDFE9 100        description: 'A Workspace User was promoted to Workspace Admin role by another Workspace Admin',\\n\\uD83D\\uDFE9 101      },\\n\\uD83D\\uDFE9 102    \\n\\uD83D\\uDFE9 103      // ACTIONS ON RESOURCES IN WORKSPACE\\n\\uD83D\\uDFE9 104      PLAN_CREATED: { code: 'PLAN_CREATED', description: 'Created a Plan' },\\n\\uD83D\\uDFE9 105      PLAN_DELETED: { code: 'PLAN_DELETED', description: 'Deleted a Plan' },\\n\\uD83D\\uDFE9 106      PLAN_UPDATED: { code: 'PLAN_UPDATED', description: 'Updated a Plan' },\\n\\uD83D\\uDFE9 107    \\n\\uD83D\\uDFE9 108      // UPDATER ACTIONS\\n\\uD83D\\uDFE9 109      AUTO_UPDATE_REQUESTED: { code: 'AUTO_UPDATE_REQUESTED', description: 'user requested to update the app' },\\n\\uD83D\\uDFE9 110      AUTO_UPDATE_FAILED: { code: 'AUTO_UPDATE_FAILED', description: 'Autoupdate failed' },\\n\\uD83D\\uDFE9 111    \\n\\uD83D\\uDFE9 112      // FOLDER COMMENT\\n\\uD83D\\uDFE9 113      FOLDER_COMMENT_UPDATED: {\\n\\uD83D\\uDFE9 114        code: 'FOLDER_COMMENT_UPDATED',\\n\\uD83D\\uDFE9 115        description: 'A folder comment has been created / updated',\\n\\uD83D\\uDFE9 116      },\\n\\uD83D\\uDFE9 117      FOLDER_COMMENT_DELETED: { code: 'FOLDER_COMMENT_DELETED', description: 'A folder comment has been deleted' },\\n\\uD83D\\uDFE9 118    \\n\\uD83D\\uDFE9 119      // UPVOTE ACTIONS\\n\\uD83D\\uDFE9 120      USER_UPVOTED_RESOURCE: { code: 'USER_UPVOTED_RESOURCE', description: 'A user up-voted a resource' },\\n\\uD83D\\uDFE9 121      USER_DOWNVOTED_RESOURCE: { code: 'USER_DOWNVOTED_RESOURCE', description: 'A user down-voted a resource' },\\n\\uD83D\\uDFE9 122    \\n\\uD83D\\uDFE9 123      // HUNKS UPDATE ACTIONS\\n\\uD83D\\uDFE9 124      AUTOSYNC_HUNK_ACCEPTED: { code: 'AUTOSYNC_HUNK_ACCEPTED', description: 'Autosynced hunk was accepted by the user' },\\n\\uD83D\\uDFE9 125      AUTOSYNCED_HUNK_RESELECTED: { code: 'AUTOSYNCED_HUNK_RESELECTED', description: 'Autosynced hunk was reselected and replaced with another hunk by the user' },\\n\\uD83D\\uDFE9 126      OUTDATED_HUNK_DELETED: { code: 'OUTDATED_HUNK_DELETED', description: 'Outdated hunk was deleted by the user' },\\n\\uD83D\\uDFE9 127      OUTDATED_HUNK_RESELECTED: { code: 'OUTDATED_HUNK_RESELECTED', description: 'Outdated hunk was reselected and replaced with another hunk by the user' },\\n\\uD83D\\uDFE9 128    };\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This is how we prepare our event log message before sending it to firestore.\\nNote the validation stage (done by using Joi) after building the message\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/shared/event-logger/event-logger.ts  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"\\u2B1C 1      import { eventSchema } from './logger-schema';\\n\\u2B1C 2      import { SWIMM_EVENTS } from './swimm-events';\\n\\u2B1C 3      import { ERROR_RETURN_CODE, SUCCESS_RETURN_CODE } from '../config';\\n\\u2B1C 4      \\n\\u2B1C 5      /**\\n\\u2B1C 6       Validate event log message by schema\\n\\u2B1C 7       */\\n\\u2B1C 8      export function validateEventMessage(eventMessage) {\\n\\u2B1C 9        try {\\n\\u2B1C 10         const validationResult = eventSchema.validate(eventMessage);\\n\\u2B1C 11         if (!validationResult.error) {\\n\\u2B1C 12           return {\\n\\u2B1C 13             code: SUCCESS_RETURN_CODE,\\n\\u2B1C 14             eventMessage: eventMessage,\\n\\u2B1C 15           };\\n\\u2B1C 16         }\\n\\u2B1C 17         return {\\n\\u2B1C 18           code: ERROR_RETURN_CODE,\\n\\u2B1C 19           error: validationResult.error,\\n\\u2B1C 20         };\\n\\u2B1C 21       } catch (error) {\\n\\u2B1C 22         return { code: ERROR_RETURN_CODE, error: error };\\n\\u2B1C 23       }\\n\\u2B1C 24     }\\n\\u2B1C 25     \\n\\u2B1C 26     /**\\n\\u2B1C 27      Builds and validates the event message from basic user log message, app_version and user data\\n\\u2B1C 28      */\\n\\uD83D\\uDFE9 29     export function prepareEventLogMessage({ logMessage, userData, version }) {\\n\\uD83D\\uDFE9 30       try {\\n\\uD83D\\uDFE9 31         const eventMessage = buildEventMessage({\\n\\uD83D\\uDFE9 32           userMessage: logMessage,\\n\\uD83D\\uDFE9 33           user: userData,\\n\\uD83D\\uDFE9 34           version: version,\\n\\uD83D\\uDFE9 35         });\\n\\uD83D\\uDFE9 36         return validateEventMessage(eventMessage);\\n\\uD83D\\uDFE9 37       } catch (error) {\\n\\uD83D\\uDFE9 38         return { code: ERROR_RETURN_CODE, error: error };\\n\\uD83D\\uDFE9 39       }\\n\\uD83D\\uDFE9 40     }\\n\\u2B1C 41     \\n\\u2B1C 42     /**\\n\\u2B1C 43      Builds event log message\\n\\u2B1C 44      */\\n\\u2B1C 45     export function buildEventMessage({ userMessage, user, version }) {\\n\\u2B1C 46       const event = SWIMM_EVENTS[userMessage.swimmEventCode] ? SWIMM_EVENTS[userMessage.swimmEventCode] : SWIMM_EVENTS.UNKNOWN;\\n\\u2B1C 47       return {\\n\\u2B1C 48         ...userMessage,\\n\\u2B1C 49         swimmEventCode: event.code,\\n\\u2B1C 50         actionName: event.description,\\n\\u2B1C 51         app_version: version,\\n\\u2B1C 52         userId: user.uid,\\n\\u2B1C 53         userName: user.nickname,\\n\\u2B1C 54       };\\n\\u2B1C 55     }\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This is the security rule related to the event logger.\\nSince the eventlogger schema is not updated automatically for now, whenever updating one of the values here - remember to update also the related value in the eventLog schema.\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 cloud/firestore.rules  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-rules\"\n  }), \"\\u2B1C 33     \\n\\uD83D\\uDFE9 34         match /event_logs/{event_log} {\\n\\uD83D\\uDFE9 35           // Read is allowed only for admins\\n\\uD83D\\uDFE9 36           allow create, update: if validateEventLogWhitelistFieldsForRequest() && (request.auth.uid == request.resource.data.userId);\\n\\uD83D\\uDFE9 37           // Deletion is not allowed from the client\\n\\uD83D\\uDFE9 38     \\n\\uD83D\\uDFE9 39           function validateEventLogWhitelistFieldsForRequest() {\\n\\uD83D\\uDFE9 40             return request.resource.data.keys().toSet().hasOnly([\\\"swimmEventCode\\\", \\\"message\\\", \\\"value\\\", \\\"category\\\", \\\"userId\\\", \\\"userName\\\", \\\"actionName\\\", \\\"app_version\\\", \\\"workspaceId\\\", \\\"workspaceName\\\", \\\"planId\\\", \\\"planName\\\", \\\"repoId\\\", \\\"repoName\\\", \\\"playlistId\\\", \\\"playlistName\\\", \\\"srcId\\\", \\\"srcName\\\", \\\"srcType\\\", \\\"targetId\\\", \\\"targetName\\\", \\\"created\\\"]);\\n\\uD83D\\uDFE9 41           }\\n\\uD83D\\uDFE9 42         }\\n\\u2B1C 43     \\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"A good-to-know about this mixin is the usage of the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user\"), \" auth data. If this mixin is used by another mixin, then the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"auth\"), \" store won't be accesible here by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mapState\"), \". Therefor if called from a mixin, the caller should send the user object alongside the logMessage\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/common/mixins/event-logger.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\uD83D\\uDFE9 14       computed: {\\n\\uD83D\\uDFE9 15         ...mapState('auth', ['user']),\\n\\uD83D\\uDFE9 16       },\\n\\uD83D\\uDFE9 17       methods: {\\n\\uD83D\\uDFE9 18         async logEvent(logMessage, user) {\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This is the logEvent common \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mixin\"), \" that we use through our FE code in order to send the events to the DB\\nThe event payload is being sent from the caller and being parsed to our \\\"firestore friendly\\\" event-log message structure.\\nNote that for validation errors we send an error to the local logger\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/common/mixins/event-logger.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\u2B1C 15         ...mapState('auth', ['user']),\\n\\u2B1C 16       },\\n\\u2B1C 17       methods: {\\n\\uD83D\\uDFE9 18         async logEvent(logMessage, user) {\\n\\uD83D\\uDFE9 19           // Reset password event happens without \\\"auth\\\". Therefore a special handling is needed\\n\\uD83D\\uDFE9 20           const eventCode = logMessage.swimmEventCode || '';\\n\\uD83D\\uDFE9 21           if (eventCode === SWIMM_EVENTS.USER_RESET_PASSWORD) {\\n\\uD83D\\uDFE9 22             return logForgotPassword(logMessage);\\n\\uD83D\\uDFE9 23           }\\n\\uD83D\\uDFE9 24           try {\\n\\uD83D\\uDFE9 25             const routeData = this.getRouteCollectionMetadata();\\n\\uD83D\\uDFE9 26             const logWithRoutedata = { ...routeData, ...logMessage };\\n\\uD83D\\uDFE9 27             const userData = user ? { ...user } : this.user; // When called from store modules, auth mapState will be undefined.\\n\\uD83D\\uDFE9 28             const createLogMessage = prepareEventLogMessage({ logMessage: logWithRoutedata, userData: userData, version: PJSON_VERSION });\\n\\uD83D\\uDFE9 29             if (createLogMessage.code === SUCCESS_RETURN_CODE) {\\n\\uD83D\\uDFE9 30               await firebase\\n\\uD83D\\uDFE9 31                 .firestore()\\n\\uD83D\\uDFE9 32                 .collection('event_logs')\\n\\uD83D\\uDFE9 33                 .add({ ...createLogMessage.eventMessage, created: firebase.firestore.FieldValue.serverTimestamp() });\\n\\uD83D\\uDFE9 34               return SUCCESS_RETURN_CODE;\\n\\uD83D\\uDFE9 35             }\\n\\uD83D\\uDFE9 36             logger.error(`could not prepare event message for sending event log ${eventCode}. Details: ${createLogMessage.error.toString()}`, { service: 'event-log' });\\n\\uD83D\\uDFE9 37             return ERROR_RETURN_CODE;\\n\\uD83D\\uDFE9 38           } catch (error) {\\n\\uD83D\\uDFE9 39             logger.error(`could not send event log ${eventCode}. Details: ${error.toString()}`, { service: 'event-log' });\\n\\uD83D\\uDFE9 40             return ERROR_RETURN_CODE;\\n\\uD83D\\uDFE9 41           }\\n\\uD83D\\uDFE9 42         },\\n\\uD83D\\uDFE9 43       },\\n\\u2B1C 44     };\\n\\u2B1C 45     \\n\\u2B1C 46     const logForgotPassword = (userMessage) => {\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"A usage example for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"event-logger\"), \" from a FE component.\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/common/components/organisms/PlaylistCard.vue  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\u2B1C 124        async deletePlaylist() {\\n\\u2B1C 125          this.deleting = true;\\n\\u2B1C 126          const userResponse = await swal({\\n\\u2B1C 127            title: 'Are you sure you want to delete this playlist?',\\n\\u2B1C 128            buttons: {\\n\\u2B1C 129              cancel: true,\\n\\u2B1C 130              confirm: true,\\n\\u2B1C 131            },\\n\\u2B1C 132          });\\n\\u2B1C 133          if (!userResponse) {\\n\\u2B1C 134            this.deleting = false;\\n\\u2B1C 135            return false;\\n\\u2B1C 136          }\\n\\u2B1C 137          try {\\n\\u2B1C 138            await this.archiveResource({ resourceName: 'playlists', resourceId: this.playlist.id, containerDocId: this.repoId });\\n\\uD83D\\uDFE9 139            this.logEvent({\\n\\uD83D\\uDFE9 140              swimmEventCode: SWIMM_EVENTS.PLAYLIST_DELETED.code,\\n\\uD83D\\uDFE9 141              repoId: this.repoId,\\n\\uD83D\\uDFE9 142              repoName: this.getRepoMetadata(this.repoId).name || '',\\n\\uD83D\\uDFE9 143              srcId: this.playlist.id,\\n\\uD83D\\uDFE9 144              srcName: this.playlist.name,\\n\\u2B1C 145            });\\n\\u2B1C 146          } catch (error) {\\n\\u2B1C 147            console.error(`could not delete the playlist: ${error}`);\\n\\u2B1C 148          }\\n\\u2B1C 149          this.deleting = false;\\n\\u2B1C 150        },\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"A usage example for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"event-logger\"), \" from a FE mixin (note the extra user argument)\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/common/mixins/storeModulesWrapper.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\uD83D\\uDFE9 66           await this.createRepoLifeguard(this.user, newRepoId);\\n\\uD83D\\uDFE9 67           const userName = this.user.nickname || this.user.name;\\n\\uD83D\\uDFE9 68           this.logEvent(\\n\\uD83D\\uDFE9 69             { swimmEventCode: SWIMM_EVENTS.LIFEGUARD_SUBSCRIBED_TO_REPOSITORY.code, repoId: newRepoId, repoName: newRepo.name, srcId: this.user.uid, srcName: userName },\\n\\uD83D\\uDFE9 70             this.user\\n\\uD83D\\uDFE9 71           );\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In the CLI, we user \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"axios\"), \" to send the event to firestore since we do not use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"firebase-tools\"), \" (firebaseAdmin) there. The logic is very similar to the one of the FE\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/cli/utils/cli-utils.ts  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"\\uD83D\\uDFE9 291    export async function logEvent({ logMessage, user }) {\\n\\uD83D\\uDFE9 292      if (config.isTest) {\\n\\uD83D\\uDFE9 293        return config.SUCCESS_RETURN_CODE;\\n\\uD83D\\uDFE9 294      }\\n\\uD83D\\uDFE9 295    \\n\\uD83D\\uDFE9 296      try {\\n\\uD83D\\uDFE9 297        const createLogMessage = prepareEventLogMessage({ logMessage: logMessage, userData: user, version: config.PJSON_VERSION });\\n\\uD83D\\uDFE9 298        if (createLogMessage.code === config.SUCCESS_RETURN_CODE) {\\n\\uD83D\\uDFE9 299          return axios\\n\\uD83D\\uDFE9 300            .post(`${config.DB_REST_API_ADDRESS}/event_logs`, createFirestorePostMessage(createLogMessage.eventMessage), {\\n\\uD83D\\uDFE9 301              headers: { Authorization: `Bearer ${state.get('token')}` },\\n\\uD83D\\uDFE9 302            })\\n\\uD83D\\uDFE9 303            .then(() => {\\n\\uD83D\\uDFE9 304              return config.SUCCESS_RETURN_CODE;\\n\\uD83D\\uDFE9 305            })\\n\\uD83D\\uDFE9 306            .catch((err) => {\\n\\uD83D\\uDFE9 307              const errMessage = err.response.data && err.response.data.error ? err.response.data.error.message : 'UNKNOWN';\\n\\uD83D\\uDFE9 308              logger.error(`Writing log message to DB failed. status-code: ${err.response.status}; details: ${errMessage}`, { service: 'event-logger' });\\n\\uD83D\\uDFE9 309              return config.ERROR_RETURN_CODE;\\n\\uD83D\\uDFE9 310            });\\n\\uD83D\\uDFE9 311        }\\n\\uD83D\\uDFE9 312        logger.error(`Log event failed due to prepare message error: ${createLogMessage.error}`, { service: 'event-logger' });\\n\\uD83D\\uDFE9 313      } catch (error) {\\n\\uD83D\\uDFE9 314        logger.error(`Log event failed. details: \\\"${error}\\\"`, { service: 'event-logger' });\\n\\uD83D\\uDFE9 315      }\\n\\uD83D\\uDFE9 316      return config.ERROR_RETURN_CODE;\\n\\uD83D\\uDFE9 317    }\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If there are any question about the event logger, talk to @Daniel or @Eden to learn more.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"and if you find another interesting example to document about - add it to this unit \\uD83D\\uDE0A\"), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This file was generated by Swimm. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://swimm.io/link?l=c3dpbW0lM0ElMkYlMkZyZXBvcyUyRnZlZXp2eEN1enBQclJMTFhXRDJFJTJGZG9jcyUyRk5sdnNjMXNhc0JrTmx4ZWZES28z\"\n  }), \"Click here to view it in the app\"), \". Timestamp: 2021-04-20T19:12:42.801Z\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#files-used","title":"Files Used:"}]},"timeToRead":2,"parent":{"__typename":"File","relativePath":"Nlvsc1sasBkNlxefDKo3.md","fields":null},"frontmatter":{"metaTitle":null,"showMetadata":null,"editable":false,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"master"},"gitCommit":{"hash":"0cb17677e25377d6041a73fa8033496a1bb1ce03","date":"2021-04-21 03:46"}},"pageContext":{"id":"50a03499-cea4-5fc8-a19c-d9aacb0bdb93"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","3812332637","3812332637"]}
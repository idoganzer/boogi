{"componentChunkName":"component---src-templates-docs-js","path":"/vDiLLqfTVX6jK3hnfdRa","result":{"data":{"site":{"siteMetadata":{"title":"My BooGi App","docsLocation":"","docsLocationType":"","editable":true}},"mdx":{"fields":{"id":"6356f135-1dca-52cb-a0f6-6de7a0abff94","title":"Debugging AutoSync","slug":"/vDiLLqfTVX6jK3hnfdRa"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Debugging AutoSync\",\n  \"editable\": false\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"div\", {\n    align: \"center\",\n    style: {\n      \"backgroundColor\": \"#e5ecff\"\n    }\n  }, \"    \", mdx(\"br\", null), \"    \", mdx(\"div\", null, \"DOC\"), \"    \", mdx(\"h1\", null, \"Debugging AutoSync\"), \"    \", mdx(\"br\", null), \"  \"), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Files Used:\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 src/swimmagic/applicability.spec.ts\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 src/swimmagic/autofix.spec.ts\"), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"So let's say you get one of these tickets to tackle - where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"verify\"), \" says the Unit is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"verified\"), \", but the UI says all snippets are \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"autosyncable\"), \". Or vice versa. Or any other weird issue coming up with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"AutoSync\"), \". What do you do?\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This document includes some tips and best practices.\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Prerequisites.\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A deep understanding of AutoSync's main flow (\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"TBD - link\"), \").\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"General things\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Go through \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"swimm log\"), \" and see if you get helpful hints.\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"How to investigate?\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"A good start is to ask yourself what you would expect.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Open the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".swm\"), \" file, look at the actual snippets. \"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Then, look at their current state in the code.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Also, understand AutoSync's starting point (\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TBD - link\"), \"). Does it start from a specific commit deduced from the Blob Sha? The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"swimm log\"), \" should help with that.\"), mdx(\"br\", null)), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Applicability\"), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"validateApplicabilityStatuses\"), \" checks the applicability of the entire patch as well as hunk by hunk. It may give hints to see the different results.\\nRunning an applicability test that calls this function can be helpful.\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/swimmagic/applicability.spec.ts  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"\\u2B1C 40      * Validates units applicability statuses\\n\\u2B1C 41      * @param ignoredSwmsList - ids of invalid/inapplicable swms that should be ignored when validating the applicabilities\\n\\u2B1C 42      */\\n\\uD83D\\uDFE9 43     async function validateApplicabilityStatuses({ ignoredSwmsList }: { ignoredSwmsList: string[] }) {\\n\\uD83D\\uDFE9 44       const swmsList = await getListOfSwmFilesInRepo();\\n\\uD83D\\uDFE9 45       for (const swm of swmsList) {\\n\\uD83D\\uDFE9 46         if (ignoredSwmsList.includes(swm)) {\\n\\uD83D\\uDFE9 47           continue;\\n\\uD83D\\uDFE9 48         }\\n\\uD83D\\uDFE9 49         const autoFixResult = await autofix.autoFixUnit(swm);\\n\\uD83D\\uDFE9 50         const applicabilityResults = await checkApplicabilityForSwmFile(autoFixResult.autoFixedSwmFile);\\n\\uD83D\\uDFE9 51         try {\\n\\uD83D\\uDFE9 52           expect(applicabilityResults.hunkByHunkApplicability).toEqual(applicabilityResults.gitDiffApplicability);\\n\\uD83D\\uDFE9 53         } catch (e) {\\n\\uD83D\\uDFE9 54           throw `${swm} isAutofixed: ${autoFixResult.autoFixSuccess}; hunkByHunkApplicability:${applicabilityResults.hunkByHunkApplicability},gitDiffApplicability:${applicabilityResults.gitDiffApplicability} `;\\n\\uD83D\\uDFE9 55         }\\n\\uD83D\\uDFE9 56       }\\n\\uD83D\\uDFE9 57     }\\n\\u2B1C 58     \\n\\u2B1C 59     async function checkApplicabilityForSwmFile(swmFile: SwmFile) {\\n\\u2B1C 60       const gitDiffApplicability = isSwmApplicable(swmFile);\\n\")), mdx(\"br\", null)), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"How to debug?\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"So it's time to dig in, let's run autosync's main flow. For that, you can take one of the existing tests and tweak it.\\t\"), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"For example here - we run the main flow for a specific Unit.\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/swimmagic/autofix.spec.ts  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"\\u2B1C 186        });\\n\\u2B1C 187    \\n\\u2B1C 188        describe('Update context', () => {\\n\\uD83D\\uDFE9 189          test('Update upper context and move down a few lines -> updates accordingly', async () => {\\n\\uD83D\\uDFE9 190            state.set('cwd', currentRepoCwd);\\n\\uD83D\\uDFE9 191            const UPPER_CONTEXT_UNIT_ID = 'ml5rbhkct0pUSBMLTAhc';\\n\\uD83D\\uDFE9 192            const result = await autofix.autoFixUnit(UPPER_CONTEXT_UNIT_ID);\\n\\uD83D\\uDFE9 193            expect(result.autoFixSuccess).toBeTruthy();\\n\\uD83D\\uDFE9 194            const autoFixedUnit = result.autoFixedSwmFile;\\n\\u2B1C 195            const correctCell: SwmCellSnippet = autoFixedUnit.content.filter((cell): boolean => cell.type === 'snippet')[0] as SwmCellSnippet;\\n\\u2B1C 196            expect(correctCell.firstLineNumber).toBe(3);\\n\\u2B1C 197            expect(correctCell.path).toBe('autoFixTests/updateContext/update_upper_context_only.py');\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Notice that we set the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cwd\"), \" to the relevant repo. So there's no need to copy the Unit to the staging database.\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/swimmagic/autofix.spec.ts  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"\\u2B1C 187    \\n\\u2B1C 188        describe('Update context', () => {\\n\\u2B1C 189          test('Update upper context and move down a few lines -> updates accordingly', async () => {\\n\\uD83D\\uDFE9 190            state.set('cwd', currentRepoCwd);\\n\\u2B1C 191            const UPPER_CONTEXT_UNIT_ID = 'ml5rbhkct0pUSBMLTAhc';\\n\\u2B1C 192            const result = await autofix.autoFixUnit(UPPER_CONTEXT_UNIT_ID);\\n\\u2B1C 193            expect(result.autoFixSuccess).toBeTruthy();\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"From here - you can debug the actual flow - use breakpoints and so on \\uD83D\\uDE0E\"), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Debugging AutoSync is challenging, but hopefully this document will help you.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Have tips or best practices to share? Please add them here!\"), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This file was generated by Swimm. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://swimm.io/link?l=c3dpbW0lM0ElMkYlMkZyZXBvcyUyRnZlZXp2eEN1enBQclJMTFhXRDJFJTJGZG9jcyUyRnZEaUxMcWZUVlg2akszaG5mZFJh\"\n  }), \"Click here to view it in the app\"), \". Timestamp: 2021-04-20T19:12:42.984Z\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"items":[{"url":"#files-used","title":"Files Used:"}]}]},{"url":"#prerequisites","title":"Prerequisites."},{"url":"#general-things","title":"General things"},{"url":"#how-to-investigate","title":"How to investigate?"},{"url":"#applicability","title":"Applicability"},{"url":"#how-to-debug","title":"How to debug?"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"vDiLLqfTVX6jK3hnfdRa.md","fields":null},"frontmatter":{"metaTitle":null,"showMetadata":null,"editable":false,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"master"},"gitCommit":{"hash":"0cb17677e25377d6041a73fa8033496a1bb1ce03","date":"2021-04-21 03:46"}},"pageContext":{"id":"6356f135-1dca-52cb-a0f6-6de7a0abff94"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","3812332637","3812332637"]}
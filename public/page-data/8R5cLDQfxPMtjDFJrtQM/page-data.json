{"componentChunkName":"component---src-templates-docs-js","path":"/8R5cLDQfxPMtjDFJrtQM","result":{"data":{"site":{"siteMetadata":{"title":"My BooGi App","docsLocation":"","docsLocationType":"","editable":true}},"mdx":{"fields":{"id":"e1577ba4-2391-545f-af60-7ef80cd47de3","title":"Electron ⚡ Main Process","slug":"/8R5cLDQfxPMtjDFJrtQM"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Electron ⚡ Main Process\",\n  \"editable\": false\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"div\", {\n    align: \"center\",\n    style: {\n      \"backgroundColor\": \"#e5ecff\"\n    }\n  }, \"    \", mdx(\"br\", null), \"    \", mdx(\"div\", null, \"DOC\"), \"    \", mdx(\"h1\", null, \"Electron \\u26A1 Main Process\"), \"    \", mdx(\"br\", null), \"  \"), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Files Used:\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 src/app/electron-main.js\"), mdx(\"br\", null)), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Electron Main process\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"The DOD of this walkthrough\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In this walkthrough, we will go over some of the key features of electron's main process in Swimm.\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"What is it about?\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Electron's main process (sometimes referred to as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"background.js\"), \") is responsible for managing all the processes and tasks of the Electron app.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The main process is responsible for responding to applications life cycle events, starting and quitting the application. When we launch an Electron application, the framework runs the script specified in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vue.config.js\"), \" (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"electron-main.js\"), \") . The script creates the application window (renderer process).\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Important concepts:\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Events\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In general, Electron uses lots of events to handle different flows of the application. In the main process, we subscribe to an event and implement a callback function that will run whenever the related event triggers. \")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Single Instance\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Swimm.app is running as a singleton. That means that if the user has already a running Swimm app instance they won't be able to run another one in parallel. We use \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.electronjs.org/docs/api/app#event-second-instance\"\n  }), \"SingleInstanceLock\"), \" to make sure that the app instance is a singleton.\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"asking for the lock actually generates a \"), mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"second-instance\"), \"* event that is handled by the main process.\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"CLI <-> App\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The CLI communicates with our app by using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"openElectronInstance()\"), \" that runs a designated command on the user's machine. The designated command tries to open the app (what may trigger a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"second-instance\"), \" event by trying to get the lock). Sometimes the cli also redirects the view to another page, like with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"swimm done\"), \". We will look into how we call this from the CLI in another walkthrough.\")), mdx(\"section\", null, mdx(\"h5\", {\n    parentName: \"section\"\n  }, \"side notes:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"There are some platform-specific handling methods that take care of several use cases or bugs with Electron. These cases are well documented within the code in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"electron-main.js\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"package.json's \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"main\"), \" field is set for \\\"background.js\\\", not \\\"electron-main.js\\\" as expected. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"background.js\"), \" is actually the name of the bundled main electron process file. You can find it inside the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dist/\"), \" directory:\"))), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://firebasestorage.googleapis.com/v0/b/swimmio-content/o/repositories%2FveezvxCuzpPrRLLXWD2E%2Fimg%2F9bc9aa79-995b-4c3a-85f7-a9a1e06d3c24.png?alt=media&token=847c17c5-b21b-42e9-b440-425a7ed8b3cc\",\n    \"alt\": \"image.png\"\n  }))), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"When the application is initialized we create a new chromium window with the  Swimm app.\\nIf there is already a running app - we cancel the current request for opening the app.\\nAsking for the instance lock with another instance on the background will make the already running instance focused on the user's machine.\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/electron-main.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\uD83D\\uDFE9 265    function handleDirectAppOpen() {\\n\\uD83D\\uDFE9 266      setAppLinkAsRedirectionUrl();\\n\\uD83D\\uDFE9 267      // If there is an already running app - second-instance will be triggered.\\n\\uD83D\\uDFE9 268      const gotTheLock = app.requestSingleInstanceLock();\\n\\uD83D\\uDFE9 269      if (gotTheLock) {\\n\\uD83D\\uDFE9 270        const swimmVersion = state.get('swimm_version');\\n\\uD83D\\uDFE9 271        if (!swimmVersion || getFriendlyVersion(swimmVersion) !== getFriendlyVersion(PJSON_VERSION)) {\\n\\uD83D\\uDFE9 272          state.set('should_show_version_modal', true);\\n\\uD83D\\uDFE9 273        }\\n\\uD83D\\uDFE9 274        state.set('swimm_version', PJSON_VERSION);\\n\\uD83D\\uDFE9 275        createWindow();\\n\\uD83D\\uDFE9 276      } else {\\n\\uD83D\\uDFE9 277        app.quit();\\n\\uD83D\\uDFE9 278      }\\n\\uD83D\\uDFE9 279    }\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This method creates a focused  visual window of our app.\\nIf needed, this function will handle redirections settings (for example going to the solution view page)\\nwe register to several \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"webContents\"), \" events that are being triggered by the renderer process (for example - asking to open a new native browser window)\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/electron-main.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\uD83D\\uDFE9 142    function createWindow(windowMode = 'app') {\\n\\uD83D\\uDFE9 143      // Create the browser window.\\n\\uD83D\\uDFE9 144      const windowConfig = generateBrowserWindowConfigs(windowMode);\\n\\uD83D\\uDFE9 145      win = new BrowserWindow(windowConfig);\\n\\uD83D\\uDFE9 146      win.webContents.on('did-finish-load', () => {\\n\\uD83D\\uDFE9 147        win.setTitle('Swimm');\\n\\uD83D\\uDFE9 148      });\\n\\uD83D\\uDFE9 149    \\n\\uD83D\\uDFE9 150      win.webContents.on('new-window', handleNavigation);\\n\\uD83D\\uDFE9 151      win.webContents.on('will-navigate', handleNavigation);\\n\\uD83D\\uDFE9 152    \\n\\uD83D\\uDFE9 153      if (process.env.WEBPACK_DEV_SERVER_URL) {\\n\\uD83D\\uDFE9 154        // Load the url of the dev server if in development mode\\n\\uD83D\\uDFE9 155        win.loadURL(process.env.WEBPACK_DEV_SERVER_URL);\\n\\uD83D\\uDFE9 156        if (!isTest) {\\n\\uD83D\\uDFE9 157          win.webContents.openDevTools();\\n\\uD83D\\uDFE9 158        }\\n\\uD83D\\uDFE9 159      } else {\\n\\uD83D\\uDFE9 160        createProtocol('app');\\n\\uD83D\\uDFE9 161        const redirectData = state.get('redirection_data');\\n\\uD83D\\uDFE9 162        let url = redirectData ? redirectData.url : 'app://./index.html';\\n\\uD83D\\uDFE9 163    \\n\\uD83D\\uDFE9 164        // opened by app link (swimm://...)\\n\\uD83D\\uDFE9 165        const lastArg = process.argv[process.argv.length - 1];\\n\\uD83D\\uDFE9 166        if (isAppLink(lastArg)) {\\n\\uD83D\\uDFE9 167          url = updateAppLinkToAppInternalUrl(lastArg);\\n\\uD83D\\uDFE9 168        }\\n\\uD83D\\uDFE9 169        win.loadURL(url);\\n\\uD83D\\uDFE9 170        state.deleteKey('redirection_data');\\n\\uD83D\\uDFE9 171      }\\n\\uD83D\\uDFE9 172      win.once('ready-to-show', () => {\\n\\uD83D\\uDFE9 173        if (windowMode === 'cli') {\\n\\uD83D\\uDFE9 174          win.hide();\\n\\uD83D\\uDFE9 175        } else {\\n\\uD83D\\uDFE9 176          win.show();\\n\\uD83D\\uDFE9 177          win.maximize();\\n\\uD83D\\uDFE9 178          app.focus({ steal: true });\\n\\uD83D\\uDFE9 179          if (!isStaging && !isDevelopment && localConfig.get('check_updates_on_startup', true)) {\\n\\uD83D\\uDFE9 180            setTimeout(() => checkForUpdates(true), 1000);\\n\\uD83D\\uDFE9 181          }\\n\\uD83D\\uDFE9 182        }\\n\\uD83D\\uDFE9 183      });\\n\\uD83D\\uDFE9 184    \\n\\uD83D\\uDFE9 185      // setting spellcheck\\n\\uD83D\\uDFE9 186      win.webContents.session.setSpellCheckerLanguages(['en-US']);\\n\\uD83D\\uDFE9 187      win.webContents.on('context-menu', initContextMenu);\\n\\uD83D\\uDFE9 188    \\n\\uD83D\\uDFE9 189      win.on('closed', () => {\\n\\uD83D\\uDFE9 190        win = null;\\n\\uD83D\\uDFE9 191      });\\n\\uD83D\\uDFE9 192    }\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"When the CLI \\\"calls\\\" the app and tries to open it, we would want to only tell the app to redirect or to relaunch.\\nIf the app was closed what results in the  CLI success in getting the instance lock of the app, we will initiate an \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"app\"), \" instance of Swimm and release the lock. \"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/electron-main.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\uD83D\\uDFE9 248    async function handleCliCall() {\\n\\uD83D\\uDFE9 249      const redirectData = state.get('redirection_data');\\n\\uD83D\\uDFE9 250      if (redirectData) {\\n\\uD83D\\uDFE9 251        const gotTheLock = app.requestSingleInstanceLock();\\n\\uD83D\\uDFE9 252        // The CLI process should never hold the lock.\\n\\uD83D\\uDFE9 253        // If it got the lock, that means no app is open -> CLI process should release the lock and open the app in a new process.\\n\\uD83D\\uDFE9 254        if (gotTheLock) {\\n\\uD83D\\uDFE9 255          app.releaseSingleInstanceLock();\\n\\uD83D\\uDFE9 256          spawn(process.execPath, [__filename, 'spawn_instance_from_cli'], {\\n\\uD83D\\uDFE9 257            cwd: process.cwd(),\\n\\uD83D\\uDFE9 258            detached: true,\\n\\uD83D\\uDFE9 259          });\\n\\uD83D\\uDFE9 260        }\\n\\uD83D\\uDFE9 261      }\\n\\uD83D\\uDFE9 262      app.quit();\\n\\uD83D\\uDFE9 263    }\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"When detecting a second instance event, this subscription will focus the already-running app on the user's machine\\nAlso, this step the process will check if it needs to handle redirections to new pages (will happen when the second-instance was a result of a CLI related call)\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/electron-main.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\uD83D\\uDFE9 95     app.on('second-instance', (event, commandLine, workingDirectory) => {\\n\\uD83D\\uDFE9 96       // Someone tried to run a second instance, we should focus our window.\\n\\uD83D\\uDFE9 97       const redirectData = state.get('redirection_data');\\n\\uD83D\\uDFE9 98       if (redirectData) {\\n\\uD83D\\uDFE9 99         let redirectionUrl = redirectData.url;\\n\\uD83D\\uDFE9 100        redirectionUrl = updateAppUrlToDevServerUrl(redirectionUrl);\\n\\uD83D\\uDFE9 101        if (win) {\\n\\uD83D\\uDFE9 102          win.loadURL(redirectionUrl);\\n\\uD83D\\uDFE9 103        }\\n\\uD83D\\uDFE9 104        state.deleteKey('redirection_data');\\n\\uD83D\\uDFE9 105      }\\n\\uD83D\\uDFE9 106    \\n\\uD83D\\uDFE9 107      if (win) {\\n\\uD83D\\uDFE9 108        if (win.isMinimized()) {\\n\\uD83D\\uDFE9 109          win.restore();\\n\\uD83D\\uDFE9 110        }\\n\\uD83D\\uDFE9 111        // required for windows\\n\\uD83D\\uDFE9 112        win.focus();\\n\\uD83D\\uDFE9 113      }\\n\\uD83D\\uDFE9 114      // required for OSX\\n\\uD83D\\uDFE9 115      app.focus({ steal: true });\\n\\uD83D\\uDFE9 116    });\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If there are any more questions about this part of the code, talk to @Eden \"), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This file was generated by Swimm. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://swimm.io/link?l=c3dpbW0lM0ElMkYlMkZyZXBvcyUyRnZlZXp2eEN1enBQclJMTFhXRDJFJTJGZG9jcyUyRjhSNWNMRFFmeFBNdGpERkpydFFN\"\n  }), \"Click here to view it in the app\"), \". Timestamp: 2021-04-20T19:12:42.686Z\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"items":[{"url":"#files-used","title":"Files Used:"}]}]},{"url":"#electron-main-process","title":"Electron Main process","items":[{"url":"#the-dod-of-this-walkthrough","title":"The DOD of this walkthrough"},{"url":"#what-is-it-about","title":"What is it about?"},{"url":"#important-concepts","title":"Important concepts:","items":[{"url":"#events","title":"Events"},{"url":"#single-instance","title":"Single Instance"},{"url":"#cli---app","title":"CLI <-> App","items":[{"items":[{"url":"#side-notes","title":"side notes:"}]}]}]}]}]},"timeToRead":2,"parent":{"__typename":"File","relativePath":"8R5cLDQfxPMtjDFJrtQM.md","fields":null},"frontmatter":{"metaTitle":null,"showMetadata":null,"editable":false,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"master"},"gitCommit":{"hash":"0cb17677e25377d6041a73fa8033496a1bb1ce03","date":"2021-04-21 03:46"}},"pageContext":{"id":"e1577ba4-2391-545f-af60-7ef80cd47de3"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","3812332637","3812332637"]}
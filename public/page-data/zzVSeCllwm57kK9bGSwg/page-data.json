{"componentChunkName":"component---src-templates-docs-js","path":"/zzVSeCllwm57kK9bGSwg","result":{"data":{"site":{"siteMetadata":{"title":"My BooGi App","docsLocation":"","docsLocationType":"","editable":true}},"mdx":{"fields":{"id":"68ac2090-d34f-5f73-af12-6c7d52388fe4","title":"The Local Logger","slug":"/zzVSeCllwm57kK9bGSwg"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"The Local Logger\",\n  \"editable\": false\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"div\", {\n    align: \"center\",\n    style: {\n      \"backgroundColor\": \"#e5ecff\"\n    }\n  }, \"    \", mdx(\"br\", null), \"    \", mdx(\"div\", null, \"DOC\"), \"    \", mdx(\"h1\", null, \"The Local Logger\"), \"    \", mdx(\"br\", null), \"  \"), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Files Used:\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 src/shared/config.js\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 src/shared/logger.js\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 src/app/adapters/load.ts\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 src/app/electron-utils/auto-updater.js\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 src/cli/commands/log.ts\"), mdx(\"br\", null)), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Logging about things that happen through the app is important.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In addition to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"EventLogger\"), \" service (which is described in another unit),\\nwe have a \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Local Logger\"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"We are using the library \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/winstonjs/winston\"\n  }), \"winston\"), \" as a local-log solution. Whenever an error or an important event in the CLI or in an Adapter occurs, we can safely log that with our logger (instead of spamming the user with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.log\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"console.error\"), \").\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The logger's config is defined in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Shared/logger.js\"), \", and using it is super easy!\\nWe log events by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"logLevel\"), \":\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"for errors, we use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"logger.error\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"for info messages, we use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"logger.info\"))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Yes. It's that simple.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To view the log, we can either open the local \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".log\"), \" file with our favorite text editor, or use the CLI command \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"swimm log\"), \" (or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"swimmdev log\"), \") which automatically tails the log file (also for windows users :) ) and watch for changes:\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://firebasestorage.googleapis.com/v0/b/swimmio-content/o/repositories%2FveezvxCuzpPrRLLXWD2E%2Fimg%2Fca282700-0416-4dbc-b2fe-faf804f7e67f.png?alt=media&token=4b7c5554-9042-4816-a681-2eb73786a321\",\n    \"alt\": \"image.png\"\n  }))), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Default properties for the local logger are defined here\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/shared/config.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\u2B1C 118      STORE_DB_METADATA: 'STORE_DB_METADATA',\\n\\u2B1C 119    };\\n\\u2B1C 120    \\n\\uD83D\\uDFE9 121    const LOCAL_LOG_FILE_CONFIG = {\\n\\uD83D\\uDFE9 122      filename: locations.LOG_FILE,\\n\\uD83D\\uDFE9 123      maxLogSize: 10485760, // 10 MB - The maximum log file size in bytes\\n\\uD83D\\uDFE9 124      maxAdditionalLogFiles: 1, // The number of additional logfiles to create when log-rotating\\n\\uD83D\\uDFE9 125      isTailable: true, // Makes sure that the original log file will always get the latest logs\\n\\uD83D\\uDFE9 126      lastLinesCount: 10, // The default last log lines to show with swimmlog before tailing the file\\n\\uD83D\\uDFE9 127    };\\n\\u2B1C 128    \\n\\u2B1C 129    const LOCAL_CONFIGS_PATH = paths.config;\\n\\u2B1C 130    const AUTOFIXED_FILE_PREFIX = 'autofixed_';\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In this step we can see how we actually create the winston logger instance by using the configuration properties from the previous snippet\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/shared/logger.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\uD83D\\uDFE9 1      import winston from 'winston';\\n\\uD83D\\uDFE9 2      \\n\\uD83D\\uDFE9 3      import { LOCAL_LOG_FILE_CONFIG } from './config';\\n\\uD83D\\uDFE9 4      \\n\\uD83D\\uDFE9 5      const logger = winston.createLogger({\\n\\uD83D\\uDFE9 6        level: 'info',\\n\\uD83D\\uDFE9 7        format: winston.format.combine(winston.format.timestamp({ format: 'DD-MM-YYYY HH:mm:ss' }), winston.format.json()),\\n\\uD83D\\uDFE9 8        defaultMeta: { service: 'user-service' },\\n\\uD83D\\uDFE9 9        transports: [\\n\\uD83D\\uDFE9 10         new winston.transports.File({\\n\\uD83D\\uDFE9 11           filename: LOCAL_LOG_FILE_CONFIG.filename,\\n\\uD83D\\uDFE9 12           maxsize: LOCAL_LOG_FILE_CONFIG.maxLogSize,\\n\\uD83D\\uDFE9 13           maxFiles: LOCAL_LOG_FILE_CONFIG.maxAdditionalLogFiles,\\n\\uD83D\\uDFE9 14           tailable: LOCAL_LOG_FILE_CONFIG.isTailable,\\n\\uD83D\\uDFE9 15         }),\\n\\uD83D\\uDFE9 16       ],\\n\\uD83D\\uDFE9 17     });\\n\\uD83D\\uDFE9 18     \\n\\uD83D\\uDFE9 19     export default logger;\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In this step we have a logger usage of logging an \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"error\"), \" event.\\nNote that the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"service\"), \" metadata-option is set as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"adapter-load\"), \". Setting this property allows us to easily understand that this specific log-message is related to the \\\"load\\\" adapter.\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/adapters/load.ts  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"\\uD83D\\uDFE9 72       } catch (error) {\\n\\uD83D\\uDFE9 73         logger.error(`failed to load unit: ${swmFileName}. Details: ${error.toString()}`, { service: 'adapter-load' });\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In this step we can see a usage for logging with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"info\"), \" log level.\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/electron-utils/auto-updater.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\u2B1C 16     autoUpdater.on('checking-for-update', () => {\\n\\uD83D\\uDFE9 17       logger.info('Checking for update...', { service: 'auto-updater' });\\n\\u2B1C 18     });\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If you are interested on how we tail the log file for changes and pretty-print it, you can read the implementation here\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/cli/commands/log.ts  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"\\u2B1C 1      import * as fs from 'fs';\\n\\u2B1C 2      import { Tail } from 'tail';\\n\\u2B1C 3      \\n\\u2B1C 4      import * as config from '../../shared/config';\\n\\u2B1C 5      import * as pprint from '../../shared/pprint';\\n\\u2B1C 6      \\n\\uD83D\\uDFE9 7      export async function app_log(linesNumber) {\\n\\uD83D\\uDFE9 8        try {\\n\\uD83D\\uDFE9 9          const logPath = config.LOCAL_LOG_FILE_CONFIG.filename;\\n\\uD83D\\uDFE9 10         const logLastLinesToPrint = linesNumber || config.LOCAL_LOG_FILE_CONFIG.lastLinesCount;\\n\\uD83D\\uDFE9 11     \\n\\uD83D\\uDFE9 12         pprint.out(pprint.colors.yellow('\\\\n-=-=-=-=-=-=-=-=-'));\\n\\uD83D\\uDFE9 13         pprint.out(pprint.colors.green('*** Swimm Log ***'));\\n\\uD83D\\uDFE9 14         pprint.out(pprint.colors.yellow('-=-=-=-=-=-=-=-=-'));\\n\\uD83D\\uDFE9 15         if (!fs.existsSync(logPath)) {\\n\\uD83D\\uDFE9 16           pprint.out(pprint.colors.magenta('Log file does not exist. Run `swimm start` to start the app and create the log file before using `swimm log`'));\\n\\uD83D\\uDFE9 17           process.exit(config.SUCCESS_RETURN_CODE);\\n\\uD83D\\uDFE9 18         }\\n\\uD83D\\uDFE9 19         pprint.out(pprint.colors.magenta(`Log file path: ${logPath}\\\\n`));\\n\\uD83D\\uDFE9 20     \\n\\uD83D\\uDFE9 21         const logFileLines = fs.readFileSync(logPath).toString().trimEnd().split('\\\\n');\\n\\uD83D\\uDFE9 22         const lastLinesOfFile = logFileLines.slice(Math.max(logFileLines.length - logLastLinesToPrint, 0));\\n\\uD83D\\uDFE9 23     \\n\\uD83D\\uDFE9 24         lastLinesOfFile.forEach((line) => pprintLogMessage(line));\\n\\uD83D\\uDFE9 25     \\n\\uD83D\\uDFE9 26         // Quit logging if user asked only for specific number of lines\\n\\uD83D\\uDFE9 27         if (linesNumber) {\\n\\uD83D\\uDFE9 28           return config.SUCCESS_RETURN_CODE;\\n\\uD83D\\uDFE9 29         }\\n\\uD83D\\uDFE9 30     \\n\\uD83D\\uDFE9 31         await tailLogFileSync();\\n\\uD83D\\uDFE9 32       } catch (error) {\\n\\uD83D\\uDFE9 33         pprint.err(error);\\n\\uD83D\\uDFE9 34         return config.ERROR_RETURN_CODE;\\n\\uD83D\\uDFE9 35       }\\n\\uD83D\\uDFE9 36       return config.SUCCESS_RETURN_CODE;\\n\\uD83D\\uDFE9 37     }\\n\\u2B1C 38     \\n\\u2B1C 39     function pprintLogMessage(message) {\\n\\u2B1C 40       try {\\n\\u2B1C 41         const parsedMessage = JSON.parse(message);\\n\\u2B1C 42         const logLevelOutputs = {\\n\\u2B1C 43           info: pprint.styles.info,\\n\\u2B1C 44           error: pprint.styles.error,\\n\\u2B1C 45           warning: pprint.styles.warning,\\n\\u2B1C 46         };\\n\\u2B1C 47         const logLevel = (logLevelOutputs[parsedMessage.level] || logLevelOutputs.info)('');\\n\\u2B1C 48         const timestamp = pprint.colors.blueBright(parsedMessage.timestamp || '');\\n\\u2B1C 49         const service = parsedMessage.service || '';\\n\\u2B1C 50         const prettyMessage = `${timestamp} [${service}] ${logLevel}${parsedMessage.message}`.trimEnd();\\n\\u2B1C 51         pprint.out(prettyMessage);\\n\\u2B1C 52       } catch (e) {\\n\\u2B1C 53         // Print a normal string if the log message object could not be parsed for some reason\\n\\u2B1C 54         pprint.out(message);\\n\\u2B1C 55       }\\n\\u2B1C 56     }\\n\\u2B1C 57     \\n\\u2B1C 58     const waitForLogs = (delay) => new Promise((resolve) => setTimeout(resolve, delay));\\n\\u2B1C 59     \\n\\u2B1C 60     async function tailLogFileSync() {\\n\\u2B1C 61       const logPath = config.LOCAL_LOG_FILE_CONFIG.filename;\\n\\u2B1C 62       const tail = new Tail(logPath, { useWatchFile: true, follow: true });\\n\\u2B1C 63       tail.on('line', function (data) {\\n\\u2B1C 64         pprintLogMessage(data);\\n\\u2B1C 65       });\\n\\u2B1C 66     \\n\\u2B1C 67       tail.on('error', function (error) {\\n\\u2B1C 68         pprint.out('Error tailing log file: ', error);\\n\\u2B1C 69         return config.ERROR_RETURN_CODE;\\n\\u2B1C 70       });\\n\\u2B1C 71       tail.watch();\\n\\u2B1C 72     \\n\\u2B1C 73       // The next line is the best line in the codebase :D\\n\\u2B1C 74       // It makes the log CLI command run endlessly (until terminated by user)\\n\\u2B1C 75       // eslint-disable-next-line no-constant-condition\\n\\u2B1C 76       while (true) {\\n\\u2B1C 77         await waitForLogs(1000);\\n\\u2B1C 78       }\\n\\u2B1C 79     }\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Eventually, logging really helps us to debug and understand sad/important flows in Swimm.\\nThe more logs we have, the less time we need to invest on \\\"blind-debugging\\\" errors.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"If you feel like there is an interesting place to add a log about, don't hesitate and add a log entry right away! :) \"), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This file was generated by Swimm. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://swimm.io/link?l=c3dpbW0lM0ElMkYlMkZyZXBvcyUyRnZlZXp2eEN1enBQclJMTFhXRDJFJTJGZG9jcyUyRnp6VlNlQ2xsd201N2tLOWJHU3dn\"\n  }), \"Click here to view it in the app\"), \". Timestamp: 2021-04-20T19:12:43.027Z\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#files-used","title":"Files Used:"},{"url":"#logging-about-things-that-happen-through-the-app-is-important","title":"Logging about things that happen through the app is important."}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"zzVSeCllwm57kK9bGSwg.md","fields":null},"frontmatter":{"metaTitle":null,"showMetadata":null,"editable":false,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"master"},"gitCommit":{"hash":"0cb17677e25377d6041a73fa8033496a1bb1ce03","date":"2021-04-21 03:46"}},"pageContext":{"id":"68ac2090-d34f-5f73-af12-6c7d52388fe4"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","3812332637","3812332637"]}
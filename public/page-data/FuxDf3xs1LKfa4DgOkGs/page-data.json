{"componentChunkName":"component---src-templates-docs-js","path":"/FuxDf3xs1LKfa4DgOkGs","result":{"data":{"site":{"siteMetadata":{"title":"My BooGi App","docsLocation":"","docsLocationType":"","editable":true}},"mdx":{"fields":{"id":"80926823-550e-5487-8c69-27bb02f62d8c","title":"Is Resource Editable ?ðŸ¤”","slug":"/FuxDf3xs1LKfa4DgOkGs"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Is Resource Editable ?ðŸ¤”\",\n  \"editable\": false\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"div\", {\n    align: \"center\",\n    style: {\n      \"backgroundColor\": \"#e5ecff\"\n    }\n  }, \"    \", mdx(\"br\", null), \"    \", mdx(\"div\", null, \"DOC\"), \"    \", mdx(\"h1\", null, \"Is Resource Editable ?\\uD83E\\uDD14\"), \"    \", mdx(\"br\", null), \"  \"), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Files Used:\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 src/app/common/mixins/storeModulesWrapper.js\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 src/app/adapters/local_state_GW.ts\"), mdx(\"br\", null)), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"To Edit Or Not To Edit? This is the question.\"), mdx(\"img\", _extends({\n    parentName: \"section\"\n  }, {\n    \"src\": \"https://media.giphy.com/media/l4hLAnH7GC9XaQkAo/giphy.gif\",\n    \"width\": 480,\n    \"height\": 336\n  })), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In our app, it's a really good question. \"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Before allowing the user to preform CRUD actions, we need to validate 2 main things:\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Permissions\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"is the user allowed to edit the resource?\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"On our own Swimm Public Repos, we do not permit any swimmmer to edit the content, lifeguards only.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Unfinished units cannot be edited by swimmers. It will ruin the surprise to see the solution before finishing the unit :)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"On the other hand, walkthroughs can be edited even if not done.\"), mdx(\"h3\", {\n    parentName: \"li\"\n  }, \"Local Workspace State\"))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Since we work with local files, we need to check that we can access the local FS and edit the files.\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We check that we are on the \\\"active\\\" repository ~= in the right local directory. If the current directory is of another repository OR just a random folder, we cannot save and commit the changes to the files there.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We check the current branch - if the branch is our beloved \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"swimm-active-branch\"), \", then we don't want the user to save the changes and then to lose them with running \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"swimm reset\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"swimm done\"), \" \")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The validations logic is kept in 2 separated mixins \"), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In this step we can see how we validate if the user is allowed to edit a resource. The validation is different by the resource type (playlist/unit) and the containing repository kind.\\nMost of the times, we use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"isResourceEditable\"), \" to determine if a user should even see a create/edit option\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/common/mixins/storeModulesWrapper.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\uD83D\\uDFE9 370    export const isResourceEditable = {\\n\\uD83D\\uDFE9 371      computed: {\\n\\uD83D\\uDFE9 372        ...mapState('auth', ['user']),\\n\\uD83D\\uDFE9 373        ...mapState('database', ['repositories', 'domainSettings']),\\n\\uD83D\\uDFE9 374        ...mapGetters('database', ['isRepoLifeguard', 'isPublicRepo', 'getSwimmStatus', 'getPlaylistStatus', 'getSwimm', 'getPlaylist']),\\n\\uD83D\\uDFE9 375      },\\n\\uD83D\\uDFE9 376      mixins: [unitPlayMode],\\n\\uD83D\\uDFE9 377      methods: {\\n\\uD83D\\uDFE9 378        isResourceEditable(repoId, resourceId, resourceType) {\\n\\uD83D\\uDFE9 379          const resource = this.getResourceByType(repoId, resourceId, resourceType);\\n\\uD83D\\uDFE9 380          if (!resource || resource.is_example) {\\n\\uD83D\\uDFE9 381            return false;\\n\\uD83D\\uDFE9 382          }\\n\\uD83D\\uDFE9 383          if (this.isRepoLifeguard(repoId, this.user.uid) || this.isCurrentUserCreatorOfResource(resource)) {\\n\\uD83D\\uDFE9 384            return true;\\n\\uD83D\\uDFE9 385          }\\n\\uD83D\\uDFE9 386          if (!this.isPublicRepo(repoId)) {\\n\\uD83D\\uDFE9 387            return resourceType === 'unit' || (resourceType === 'playlist' && this.getPlaylistStatus(repoId, this.user.uid, resourceId));\\n\\uD83D\\uDFE9 388          }\\n\\uD83D\\uDFE9 389          return false;\\n\\uD83D\\uDFE9 390        },\\n\\uD83D\\uDFE9 391        isResourceDeletable(repoId, resourceId, resourceType) {\\n\\uD83D\\uDFE9 392          const resource = this.getResourceByType(repoId, resourceId, resourceType);\\n\\uD83D\\uDFE9 393          if (!resource || resource.is_example) {\\n\\uD83D\\uDFE9 394            return false;\\n\\uD83D\\uDFE9 395          }\\n\\uD83D\\uDFE9 396          return this.isRepoLifeguard(repoId, this.user.uid) || this.isCurrentUserCreatorOfResource(resource);\\n\\uD83D\\uDFE9 397        },\\n\\uD83D\\uDFE9 398        isCurrentUserCreatorOfResource(resource) {\\n\\uD83D\\uDFE9 399          return this.user.uid === resource.creator;\\n\\uD83D\\uDFE9 400        },\\n\\uD83D\\uDFE9 401        getResourceByType(repoId, resourceId, resourceType) {\\n\\uD83D\\uDFE9 402          if (resourceType === 'playlist') {\\n\\uD83D\\uDFE9 403            return this.getPlaylist(repoId, resourceId);\\n\\uD83D\\uDFE9 404          }\\n\\uD83D\\uDFE9 405          return this.getSwimm(repoId, resourceId);\\n\\uD83D\\uDFE9 406        },\\n\\uD83D\\uDFE9 407        isAllowedToCreateWorkspace() {\\n\\uD83D\\uDFE9 408          return !this.domainSettings.isWorkspaceCreationProhibited;\\n\\uD83D\\uDFE9 409        },\\n\\uD83D\\uDFE9 410      },\\n\\uD83D\\uDFE9 411    };\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Behind the scenes, we use the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"localStateGW\"), \" adapter to get the metadata on the local repo in current context\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/adapters/local_state_GW.ts  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"\\uD83D\\uDFE9 126    const getLocalRepoMetadata = () => {\\n\\uD83D\\uDFE9 127      let repoId = 'NONE';\\n\\uD83D\\uDFE9 128      let activeBranchName = 'NONE';\\n\\uD83D\\uDFE9 129      const activeUnit = state.isUnitStarted() ? state.isUnitStarted() : 'NONE';\\n\\uD83D\\uDFE9 130      try {\\n\\uD83D\\uDFE9 131        activeBranchName = gitwrapper.getActiveBranchName();\\n\\uD83D\\uDFE9 132        repoId = state.getCurrentActiveRepoId();\\n\\uD83D\\uDFE9 133        return { code: config.SUCCESS_RETURN_CODE, repoMetadata: { repoId: repoId, activeBranchName: activeBranchName, cwd: state.get('cwd'), activeUnit: activeUnit } };\\n\\uD83D\\uDFE9 134      } catch (error) {\\n\\uD83D\\uDFE9 135        logger.error(`Could not get some local metadata ${error.message}`, { service: 'adapter-state-GW' });\\n\\uD83D\\uDFE9 136        return { code: config.ERROR_RETURN_CODE, repoMetadata: {}, error: 'Error occurred while trying to fetch local metadata' };\\n\\uD83D\\uDFE9 137      }\\n\\uD83D\\uDFE9 138    };\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In this step we can see how we check the status of the local workspace.\\nNote that if required to, this method will also alert the user with the relevant error\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/common/mixins/storeModulesWrapper.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\u2B1C 560        /**\\n\\u2B1C 561         * Validates that the local workspace is ready for CRUD changes\\n\\u2B1C 562         * @param repoId - the repoId currently shown to the user\\n\\u2B1C 563         * @param repoName - the name of the current repository\\n\\u2B1C 564         * @param repoCwd - the path to the repo locally\\n\\u2B1C 565         * @param shouldAlert - if true, also alerts the user for the error\\n\\u2B1C 566         * @param resourceName - the name of the current resource in context\\n\\u2B1C 567         * @param action - the action that's currently being validated for\\n\\u2B1C 568         * @return {Promise<{code: number, status: string}>} - returns whether CRUD can be preformed locally and the relevant state of the local state\\n\\u2B1C 569         */\\n\\uD83D\\uDFE9 570        async isLocalWorkspaceValidForEdit({ repoId, shouldAlert = false, resourceName, action, repoName, repoCwd }) {\\n\\uD83D\\uDFE9 571          try {\\n\\uD83D\\uDFE9 572            if (!(await this.isRepoCurrentlyActive(repoId)).isActive) {\\n\\uD83D\\uDFE9 573              if (shouldAlert) {\\n\\uD83D\\uDFE9 574                await this.alertInactiveLocalRepo({ action: action, anotherCwd: repoCwd, currentRepo: repoName });\\n\\uD83D\\uDFE9 575              }\\n\\uD83D\\uDFE9 576              return { code: ERROR_RETURN_CODE, status: localWorkspaceStatuses.LOCAL_REPO_IS_INACTIVE };\\n\\uD83D\\uDFE9 577            }\\n\\uD83D\\uDFE9 578            if (await this.isSwimmActiveBranch()) {\\n\\uD83D\\uDFE9 579              if (shouldAlert) {\\n\\uD83D\\uDFE9 580                await this.alertActiveSwimm({ resourceName: resourceName, action: action });\\n\\uD83D\\uDFE9 581              }\\n\\uD83D\\uDFE9 582              return { code: ERROR_RETURN_CODE, status: localWorkspaceStatuses.SWIMM_BRANCH_ACTIVE };\\n\\uD83D\\uDFE9 583            }\\n\\uD83D\\uDFE9 584            return { code: SUCCESS_RETURN_CODE, status: localWorkspaceStatuses.LOCAL_WORKSPACE_VALID };\\n\\uD83D\\uDFE9 585          } catch (error) {\\n\\uD83D\\uDFE9 586            return { code: ERROR_RETURN_CODE, status: localWorkspaceStatuses.UNKNOWN_ERROR, errorMessage: error };\\n\\uD83D\\uDFE9 587          }\\n\\uD83D\\uDFE9 588        },\\n\\uD83D\\uDFE9 589      },\\n\")), mdx(\"br\", null)), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Some Notes\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For online resources (like plans) we also validate that the user has the required permissions before showing the \\\"add\\\" button. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Same goes for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ellipsis\"), \" edit/delete options for resources that a swimmer cannot edit\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It is recommended to read about the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"firestore security rules\"), \" in order to learn more about how we secure our database from leaks and unwanted resource CRUDing.\")), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This file was generated by Swimm. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://swimm.io/link?l=c3dpbW0lM0ElMkYlMkZyZXBvcyUyRnZlZXp2eEN1enBQclJMTFhXRDJFJTJGZG9jcyUyRkZ1eERmM3hzMUxLZmE0RGdPa0dz\"\n  }), \"Click here to view it in the app\"), \". Timestamp: 2021-04-20T19:12:42.740Z\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"url":"#files-used","title":"Files Used:"}]},{"url":"#to-edit-or-not-to-edit-this-is-the-question","title":"To Edit Or Not To Edit? This is the question.","items":[{"url":"#permissions","title":"Permissions"},{"url":"#some-notes","title":"Some Notes"}]}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"FuxDf3xs1LKfa4DgOkGs.md","fields":null},"frontmatter":{"metaTitle":null,"showMetadata":null,"editable":false,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"master"},"gitCommit":{"hash":"0cb17677e25377d6041a73fa8033496a1bb1ce03","date":"2021-04-21 03:46"}},"pageContext":{"id":"80926823-550e-5487-8c69-27bb02f62d8c"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","3812332637","3812332637"]}
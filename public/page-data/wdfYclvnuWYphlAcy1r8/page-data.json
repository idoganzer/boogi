{"componentChunkName":"component---src-templates-docs-js","path":"/wdfYclvnuWYphlAcy1r8","result":{"data":{"site":{"siteMetadata":{"title":"My BooGi App","docsLocation":"","docsLocationType":"","editable":true}},"mdx":{"fields":{"id":"f3b597a5-4782-5889-be6c-8f6458403a42","title":"different visual states of the app","slug":"/wdfYclvnuWYphlAcy1r8"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"different visual states of the app\",\n  \"editable\": false\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"div\", {\n    align: \"center\",\n    style: {\n      \"backgroundColor\": \"#e5ecff\"\n    }\n  }, \"    \", mdx(\"br\", null), \"    \", mdx(\"div\", null, \"DOC\"), \"    \", mdx(\"h1\", null, \"different visual states of the app\"), \"    \", mdx(\"br\", null), \"  \"), mdx(\"br\", null), mdx(\"p\", null, \"In our app, there are a lot of different states that a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unit\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"playlist\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"doc\"), \" can be at.\"), mdx(\"p\", null, \"Each state has a different UI look like and we should test it in our flows\"), mdx(\"br\", null), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://firebasestorage.googleapis.com/v0/b/swimmio-content/o/repositories%2FveezvxCuzpPrRLLXWD2E%2Feebc0f57-250b-46e9-9c67-7bb6f8442884.png?alt=media&token=74962a4b-10a5-4b69-83d5-f73b9d9af923\",\n    \"alt\": null\n  }))), mdx(\"br\", null), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"What the testing repo contains?\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"2 playlists (empty and filled with resources)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"docs\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"without snippets but with smartext\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"with snippets and text blocks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"unavailable doc\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"newer doc\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"invalid doc\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"autosynced doc\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"outdated doc\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"links\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"youtube\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"wistia\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"local md\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"not found md\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"random internet link\"))))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"What the testing workspace contains?\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"2 plans (empty and filled with resources)\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the filled plan contains also all of the resources previously described in the repo section.\"))))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Where is it\"), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"In the staging environment. That means you'll need a running version of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"swimmStaging\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"yarn:dev\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"under a workspace named \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"_flows\"), \" . If you're not there - ask the team to invite you.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"It contains a repo named \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"book of flows(dev)\"), \" which is on the branch \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"dev_flows\"), \" of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"squirrelly-with-units\"), \" so go ahead and swimm install it, just don't forget to checkout the correct branch!\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"What we need to add (// TODO)\"), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"exercises states\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"public repos states\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"resources for watching them in edit mode (without saving!)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"more autosynced examples / the examples from the actual repo of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"squirrelly-with-units\"))), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This file was generated by Swimm. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://swimm.io/link?l=c3dpbW0lM0ElMkYlMkZyZXBvcyUyRnZlZXp2eEN1enBQclJMTFhXRDJFJTJGZG9jcyUyRndkZlljbHZudVdZcGhsQWN5MXI4\"\n  }), \"Click here to view it in the app\"), \". Timestamp: 2021-04-20T19:12:43.005Z\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#what-the-testing-repo-contains","title":"What the testing repo contains?"},{"url":"#what-the-testing-workspace-contains","title":"What the testing workspace contains?"},{"url":"#where-is-it","title":"Where is it"},{"url":"#what-we-need-to-add--todo","title":"What we need to add (// TODO)"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"wdfYclvnuWYphlAcy1r8.md","fields":null},"frontmatter":{"metaTitle":null,"showMetadata":null,"editable":false,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"master"},"gitCommit":{"hash":"0cb17677e25377d6041a73fa8033496a1bb1ce03","date":"2021-04-21 03:46"}},"pageContext":{"id":"f3b597a5-4782-5889-be6c-8f6458403a42"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","3812332637","3812332637"]}
{"componentChunkName":"component---src-templates-docs-js","path":"/uEp1dIa369YpLgmINAry","result":{"data":{"site":{"siteMetadata":{"title":"My BooGi App","docsLocation":"","docsLocationType":"","editable":true}},"mdx":{"fields":{"id":"fe795c5d-774b-59dd-8785-c1b278c8ce4a","title":"Database store","slug":"/uEp1dIa369YpLgmINAry"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Database store\",\n  \"editable\": false\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"div\", {\n    align: \"center\",\n    style: {\n      \"backgroundColor\": \"#e5ecff\"\n    }\n  }, \"    \", mdx(\"br\", null), \"    \", mdx(\"div\", null, \"DOC\"), \"    \", mdx(\"h1\", null, \"Database store\"), \"    \", mdx(\"br\", null), \"  \"), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Files Used:\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 src/app/common/store/database.js\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 src/app/common/components/organisms/RepoCard.vue\"), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The Swimm app has two main data stores:\"), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"database\"), \" - stores data from the DB(Firebase).\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"filesystem\"), \" - stores local files data (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"./swm\"), \" folder).\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The stores are used to share data across the app while fetching it once.\\nIn this unit we focus on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"database\"), \" store, you will learn how to store data in it and how to use it.\"), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In this step we declare the base structure of the store state. we will keep the user workspaces and repositories in the state so we could fetch them once from the DB and use the data across the app.\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/common/store/database.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\u2B1C 14     const emptyRepoUpvotes = () => ({ swimm: {}, playlist: {} });\\n\\u2B1C 15     const emptyWorkspaceUpvotes = () => ({ plan: {} });\\n\\u2B1C 16     \\n\\uD83D\\uDFE9 17     const getDefaultState = () => ({\\n\\uD83D\\uDFE9 18       repositories: {},\\n\\uD83D\\uDFE9 19       workspaces: {},\\n\\uD83D\\uDFE9 20       invitedWorkspaces: {},\\n\\uD83D\\uDFE9 21       upvotes: emptyUpvotes(),\\n\\uD83D\\uDFE9 22       hasFetchedUserRepos: false, // to avoid fetching all swimmer repos twice in the same session\\n\\uD83D\\uDFE9 23       hasFetchedUserWorkspaces: false,\\n\\uD83D\\uDFE9 24       hasFetchedWorkspacesRepos: false,\\n\\uD83D\\uDFE9 25       hasFetchedWorkspacesInvites: false,\\n\\uD83D\\uDFE9 26       hasFetchedOpenSourceRepos: false,\\n\\uD83D\\uDFE9 27       hasFetchedUserUpvotes: false,\\n\\uD83D\\uDFE9 28       domainSettings: {},\\n\\uD83D\\uDFE9 29     });\\n\\uD83D\\uDFE9 30     \\n\\uD83D\\uDFE9 31     export default {\\n\\uD83D\\uDFE9 32       namespaced: true,\\n\\uD83D\\uDFE9 33       state: getDefaultState(),\\n\\u2B1C 34       mutations: {\\n\\u2B1C 35         RESET_STATE(state) {\\n\\u2B1C 36           Object.assign(state, getDefaultState());\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In this step we declare the store mutations, this is the code that actually update the state data.\\nNote that we use the Vue.set function to update the state data, this is needed to make reactive components that will update when the data is updated.\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/common/store/database.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\u2B1C 31     export default {\\n\\u2B1C 32       namespaced: true,\\n\\u2B1C 33       state: getDefaultState(),\\n\\uD83D\\uDFE9 34       mutations: {\\n\\uD83D\\uDFE9 35         RESET_STATE(state) {\\n\\uD83D\\uDFE9 36           Object.assign(state, getDefaultState());\\n\\uD83D\\uDFE9 37         },\\n\\uD83D\\uDFE9 38         SET_REPO_METADATA(state, args) {\\n\\uD83D\\uDFE9 39           if (!(args.repoId in state.repositories)) {\\n\\uD83D\\uDFE9 40             Vue.set(state.repositories, args.repoId, emptyRepo());\\n\\uD83D\\uDFE9 41           }\\n\\uD83D\\uDFE9 42           Vue.set(state.repositories[args.repoId], 'metadata', { ...args.resource, id: args.repoId });\\n\\uD83D\\uDFE9 43         },\\n\\uD83D\\uDFE9 44         SET_REPO_RESOURCE(state, args) {\\n\\uD83D\\uDFE9 45           if (!(args.repoId in state.repositories)) {\\n\\uD83D\\uDFE9 46             Vue.set(state.repositories, args.repoId, emptyRepo());\\n\\uD83D\\uDFE9 47           }\\n\\uD83D\\uDFE9 48           // For backward compability\\n\\uD83D\\uDFE9 49           if (args.resourceName === 'swimms' && !('type' in args.resource)) {\\n\\uD83D\\uDFE9 50             args.resource.type = 'unit';\\n\\uD83D\\uDFE9 51           }\\n\\uD83D\\uDFE9 52           if ('id' in args.resource) {\\n\\uD83D\\uDFE9 53             Vue.set(state.repositories[args.repoId][args.resourceName], args.resource.id, args.resource);\\n\\uD83D\\uDFE9 54           } else {\\n\\uD83D\\uDFE9 55             Vue.set(state.repositories[args.repoId], args.resourceName, args.resource);\\n\\uD83D\\uDFE9 56           }\\n\\uD83D\\uDFE9 57         },\\n\\u2B1C 58         SET_REPO_SWIMMER(state, args) {\\n\\u2B1C 59           if (!(args.repoId in state.repositories)) {\\n\\u2B1C 60             Vue.set(state.repositories, args.repoId, emptyRepo());\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In this step we declare an action that fetches the data from the DB(Firestore) and calls the mutation to update the state data.\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/common/store/database.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\u2B1C 321            originalValue: !!originalValue,\\n\\u2B1C 322          });\\n\\u2B1C 323        },\\n\\uD83D\\uDFE9 324        fetchRepository({ commit, state }, args) {\\n\\uD83D\\uDFE9 325          const { repoId } = args;\\n\\uD83D\\uDFE9 326          return new Promise((resolve, reject) => {\\n\\uD83D\\uDFE9 327            if (!(repoId in state.repositories)) {\\n\\uD83D\\uDFE9 328              firebase\\n\\uD83D\\uDFE9 329                .firestore()\\n\\uD83D\\uDFE9 330                .collection('repositories')\\n\\uD83D\\uDFE9 331                .doc(repoId)\\n\\uD83D\\uDFE9 332                .get()\\n\\uD83D\\uDFE9 333                .then(function (resourceRef) {\\n\\uD83D\\uDFE9 334                  commit('SET_REPO_METADATA', { repoId: resourceRef.id, resource: resourceRef.data() });\\n\\uD83D\\uDFE9 335                  resolve();\\n\\uD83D\\uDFE9 336                })\\n\\uD83D\\uDFE9 337                .catch(function (error) {\\n\\uD83D\\uDFE9 338                  console.error('Error getting documents: ', error);\\n\\uD83D\\uDFE9 339                  reject();\\n\\uD83D\\uDFE9 340                });\\n\\uD83D\\uDFE9 341            } else {\\n\\uD83D\\uDFE9 342              resolve();\\n\\uD83D\\uDFE9 343            }\\n\\uD83D\\uDFE9 344          });\\n\\uD83D\\uDFE9 345        },\\n\\u2B1C 346        subscribeToRepository({ commit, dispatch, state }, args) {\\n\\u2B1C 347          let { repoId, updateChildren = [] } = args;\\n\\u2B1C 348          if (!state.repositories[repoId] || !state.repositories[repoId].subscribed) {\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Here we created a getter function that allows components to access a specific state data.\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/common/store/database.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\u2B1C 1049       getSwimm: (state) => (repoId, swimmId) => state.repositories[repoId].swimms[swimmId],\\n\\u2B1C 1050       getPlaylist: (state) => (repoId, playlistId) => state.repositories[repoId].playlists[playlistId],\\n\\u2B1C 1051       getSwimmer: (state) => (repoId, swimmerId) => state.repositories[repoId].swimmers[swimmerId],\\n\\uD83D\\uDFE9 1052       getRepository: (state) => (repoId) => state.repositories[repoId],\\n\\u2B1C 1053       getSwimmsInPlaylist: (state, getters) => (repoId, playlistId, type) => {\\n\\u2B1C 1054         let swimmsInPlaylist = getters\\n\\u2B1C 1055           .getPlaylist(repoId, playlistId)\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"and finally the repo card component fetches the data it needs by calling the \\\"fetchRepository\\\" action from the database store.\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/common/components/organisms/RepoCard.vue  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\u2B1C 72           return this.repositories[this.repoId];\\n\\u2B1C 73         },\\n\\u2B1C 74       },\\n\\uD83D\\uDFE9 75       async created() {\\n\\uD83D\\uDFE9 76         try {\\n\\uD83D\\uDFE9 77           if (!(this.repoId in this.repositories)) {\\n\\uD83D\\uDFE9 78             await this.fetchRepository({ repoId: this.repoId });\\n\\uD83D\\uDFE9 79           }\\n\\uD83D\\uDFE9 80           const containingWorkspace = this.getWorkspaceByRepo(this.repoId);\\n\\uD83D\\uDFE9 81           this.workspaceLogo = containingWorkspace && containingWorkspace.logo;\\n\\uD83D\\uDFE9 82         } catch (error) {\\n\\uD83D\\uDFE9 83           console.error(`Could not fetch public repo (${this.repoId}).`);\\n\\uD83D\\uDFE9 84           this.unavailable = true;\\n\\uD83D\\uDFE9 85         }\\n\\uD83D\\uDFE9 86         this.loading = false;\\n\\uD83D\\uDFE9 87       },\\n\\uD83D\\uDFE9 88       methods: {\\n\\uD83D\\uDFE9 89         ...mapActions('database', ['fetchRepository']),\\n\\uD83D\\uDFE9 90       },\\n\\u2B1C 91     };\\n\\u2B1C 92     </script>\\n\\u2B1C 93     \\n\")), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This file was generated by Swimm. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://swimm.io/link?l=c3dpbW0lM0ElMkYlMkZyZXBvcyUyRnZlZXp2eEN1enBQclJMTFhXRDJFJTJGZG9jcyUyRnVFcDFkSWEzNjlZcExnbUlOQXJ5\"\n  }), \"Click here to view it in the app\"), \". Timestamp: 2021-04-20T19:12:42.962Z\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#files-used","title":"Files Used:"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"uEp1dIa369YpLgmINAry.md","fields":null},"frontmatter":{"metaTitle":null,"showMetadata":null,"editable":false,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"master"},"gitCommit":{"hash":"0cb17677e25377d6041a73fa8033496a1bb1ce03","date":"2021-04-21 03:46"}},"pageContext":{"id":"fe795c5d-774b-59dd-8785-c1b278c8ce4a"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","3812332637","3812332637"]}
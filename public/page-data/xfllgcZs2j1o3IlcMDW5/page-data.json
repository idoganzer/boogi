{"componentChunkName":"component---src-templates-docs-js","path":"/xfllgcZs2j1o3IlcMDW5","result":{"data":{"site":{"siteMetadata":{"title":"My BooGi App","docsLocation":"","docsLocationType":"","editable":true}},"mdx":{"fields":{"id":"74df6b58-ef64-5daa-807c-19bfc55b534e","title":"Xfllgc Zs 2 J 1 O 3 Ilc MDW 5","slug":"/xfllgcZs2j1o3IlcMDW5"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"div\", {\n    align: \"center\",\n    style: {\n      \"backgroundColor\": \"#e5ecff\"\n    }\n  }, \"    \", mdx(\"br\", null), \"    \", mdx(\"div\", null, \"DOC\"), \"    \", mdx(\"h1\", null, \"April\"), \"    \", mdx(\"br\", null), \"  \"), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Files Used:\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 Userland/Libraries/LibCrypto/ASN1/DER.cpp\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 Userland/Libraries/LibCrypto/ASN1/DER.h\"), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"LibCrypo: Add an ASN.1/DER pretty-printer\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"It's much easier to debug things when we can actually \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"see\"), \" them :P\"), mdx(\"br\", null), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 Userland/Libraries/LibCrypto/ASN1/DER.cpp  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"\\u2B1C 273        return {};\\n\\u2B1C 274    }\\n\\u2B1C 275    \\n\\uD83D\\uDFE9 276    void pretty_print(Decoder& decoder, OutputStream& stream, int indent)\\n\\uD83D\\uDFE9 277    {\\n\\uD83D\\uDFE9 278        while (!decoder.eof()) {\\n\\uD83D\\uDFE9 279            auto tag = decoder.peek();\\n\\uD83D\\uDFE9 280            if (tag.is_error()) {\\n\\uD83D\\uDFE9 281                dbgln(\\\"PrettyPrint error: {}\\\", tag.error());\\n\\uD83D\\uDFE9 282                return;\\n\\uD83D\\uDFE9 283            }\\n\\uD83D\\uDFE9 284    \\n\\uD83D\\uDFE9 285            StringBuilder builder;\\n\\uD83D\\uDFE9 286            for (int i = 0; i < indent; ++i)\\n\\uD83D\\uDFE9 287                builder.append(' ');\\n\\uD83D\\uDFE9 288            builder.appendff(\\\"<{}> \\\", class_name(tag.value().class_));\\n\\uD83D\\uDFE9 289            if (tag.value().type == Type::Constructed) {\\n\\uD83D\\uDFE9 290                builder.appendff(\\\"[{}] {} ({})\\\", type_name(tag.value().type), static_cast<u8>(tag.value().kind), kind_name(tag.value().kind));\\n\\uD83D\\uDFE9 291                if (auto error = decoder.enter(); error.has_value()) {\\n\\uD83D\\uDFE9 292                    dbgln(\\\"Constructed PrettyPrint error: {}\\\", error.value());\\n\\uD83D\\uDFE9 293                    return;\\n\\uD83D\\uDFE9 294                }\\n\\uD83D\\uDFE9 295    \\n\\uD83D\\uDFE9 296                builder.append('\\\\n');\\n\\uD83D\\uDFE9 297                stream.write(builder.string_view().bytes());\\n\\uD83D\\uDFE9 298    \\n\\uD83D\\uDFE9 299                pretty_print(decoder, stream, indent + 2);\\n\\uD83D\\uDFE9 300    \\n\\uD83D\\uDFE9 301                if (auto error = decoder.leave(); error.has_value()) {\\n\\uD83D\\uDFE9 302                    dbgln(\\\"Constructed PrettyPrint error: {}\\\", error.value());\\n\\uD83D\\uDFE9 303                    return;\\n\\uD83D\\uDFE9 304                }\\n\\uD83D\\uDFE9 305    \\n\\uD83D\\uDFE9 306                continue;\\n\\uD83D\\uDFE9 307            } else {\\n\\uD83D\\uDFE9 308                if (tag.value().class_ != Class::Universal)\\n\\uD83D\\uDFE9 309                    builder.appendff(\\\"[{}] {} {}\\\", type_name(tag.value().type), static_cast<u8>(tag.value().kind), kind_name(tag.value().kind));\\n\\uD83D\\uDFE9 310                else\\n\\uD83D\\uDFE9 311                    builder.appendff(\\\"[{}] {}\\\", type_name(tag.value().type), kind_name(tag.value().kind));\\n\\uD83D\\uDFE9 312                switch (tag.value().kind) {\\n\\uD83D\\uDFE9 313                case Kind::Eol: {\\n\\uD83D\\uDFE9 314                    auto value = decoder.read<ReadonlyBytes>();\\n\\uD83D\\uDFE9 315                    if (value.is_error()) {\\n\\uD83D\\uDFE9 316                        dbgln(\\\"EOL PrettyPrint error: {}\\\", value.error());\\n\\uD83D\\uDFE9 317                        return;\\n\\uD83D\\uDFE9 318                    }\\n\\uD83D\\uDFE9 319                    break;\\n\\uD83D\\uDFE9 320                }\\n\\uD83D\\uDFE9 321                case Kind::Boolean: {\\n\\uD83D\\uDFE9 322                    auto value = decoder.read<bool>();\\n\\uD83D\\uDFE9 323                    if (value.is_error()) {\\n\\uD83D\\uDFE9 324                        dbgln(\\\"Bool PrettyPrint error: {}\\\", value.error());\\n\\uD83D\\uDFE9 325                        return;\\n\\uD83D\\uDFE9 326                    }\\n\\uD83D\\uDFE9 327                    builder.appendff(\\\" {}\\\", value.value());\\n\\uD83D\\uDFE9 328                    break;\\n\\uD83D\\uDFE9 329                }\\n\\uD83D\\uDFE9 330                case Kind::Integer: {\\n\\uD83D\\uDFE9 331                    auto value = decoder.read<ReadonlyBytes>();\\n\\uD83D\\uDFE9 332                    if (value.is_error()) {\\n\\uD83D\\uDFE9 333                        dbgln(\\\"Integer PrettyPrint error: {}\\\", value.error());\\n\\uD83D\\uDFE9 334                        return;\\n\\uD83D\\uDFE9 335                    }\\n\\uD83D\\uDFE9 336                    builder.append(\\\" 0x\\\");\\n\\uD83D\\uDFE9 337                    for (auto ch : value.value())\\n\\uD83D\\uDFE9 338                        builder.appendff(\\\"{:0>2x}\\\", ch);\\n\\uD83D\\uDFE9 339                    break;\\n\\uD83D\\uDFE9 340                }\\n\\uD83D\\uDFE9 341                case Kind::BitString: {\\n\\uD83D\\uDFE9 342                    auto value = decoder.read<const BitmapView>();\\n\\uD83D\\uDFE9 343                    if (value.is_error()) {\\n\\uD83D\\uDFE9 344                        dbgln(\\\"BitString PrettyPrint error: {}\\\", value.error());\\n\\uD83D\\uDFE9 345                        return;\\n\\uD83D\\uDFE9 346                    }\\n\\uD83D\\uDFE9 347                    builder.append(\\\" 0b\\\");\\n\\uD83D\\uDFE9 348                    for (size_t i = 0; i < value.value().size(); ++i)\\n\\uD83D\\uDFE9 349                        builder.append(value.value().get(i) ? '1' : '0');\\n\\uD83D\\uDFE9 350                    break;\\n\\uD83D\\uDFE9 351                }\\n\\uD83D\\uDFE9 352                case Kind::OctetString: {\\n\\uD83D\\uDFE9 353                    auto value = decoder.read<StringView>();\\n\\uD83D\\uDFE9 354                    if (value.is_error()) {\\n\\uD83D\\uDFE9 355                        dbgln(\\\"OctetString PrettyPrint error: {}\\\", value.error());\\n\\uD83D\\uDFE9 356                        return;\\n\\uD83D\\uDFE9 357                    }\\n\\uD83D\\uDFE9 358                    builder.append(\\\" 0x\\\");\\n\\uD83D\\uDFE9 359                    for (auto ch : value.value())\\n\\uD83D\\uDFE9 360                        builder.appendff(\\\"{:0>2x}\\\", ch);\\n\\uD83D\\uDFE9 361                    break;\\n\\uD83D\\uDFE9 362                }\\n\\uD83D\\uDFE9 363                case Kind::Null: {\\n\\uD83D\\uDFE9 364                    auto value = decoder.read<decltype(nullptr)>();\\n\\uD83D\\uDFE9 365                    if (value.is_error()) {\\n\\uD83D\\uDFE9 366                        dbgln(\\\"Bool PrettyPrint error: {}\\\", value.error());\\n\\uD83D\\uDFE9 367                        return;\\n\\uD83D\\uDFE9 368                    }\\n\\uD83D\\uDFE9 369                    break;\\n\\uD83D\\uDFE9 370                }\\n\\uD83D\\uDFE9 371                case Kind::ObjectIdentifier: {\\n\\uD83D\\uDFE9 372                    auto value = decoder.read<Vector<int>>();\\n\\uD83D\\uDFE9 373                    if (value.is_error()) {\\n\\uD83D\\uDFE9 374                        dbgln(\\\"Identifier PrettyPrint error: {}\\\", value.error());\\n\\uD83D\\uDFE9 375                        return;\\n\\uD83D\\uDFE9 376                    }\\n\\uD83D\\uDFE9 377                    for (auto& id : value.value())\\n\\uD83D\\uDFE9 378                        builder.appendff(\\\" {}\\\", id);\\n\\uD83D\\uDFE9 379                    break;\\n\\uD83D\\uDFE9 380                }\\n\\uD83D\\uDFE9 381                case Kind::UTCTime:\\n\\uD83D\\uDFE9 382                case Kind::GeneralizedTime:\\n\\uD83D\\uDFE9 383                case Kind::IA5String:\\n\\uD83D\\uDFE9 384                case Kind::PrintableString: {\\n\\uD83D\\uDFE9 385                    auto value = decoder.read<StringView>();\\n\\uD83D\\uDFE9 386                    if (value.is_error()) {\\n\\uD83D\\uDFE9 387                        dbgln(\\\"String PrettyPrint error: {}\\\", value.error());\\n\\uD83D\\uDFE9 388                        return;\\n\\uD83D\\uDFE9 389                    }\\n\\uD83D\\uDFE9 390                    builder.append(' ');\\n\\uD83D\\uDFE9 391                    builder.append(value.value());\\n\\uD83D\\uDFE9 392                    break;\\n\\uD83D\\uDFE9 393                }\\n\\uD83D\\uDFE9 394                case Kind::Utf8String: {\\n\\uD83D\\uDFE9 395                    auto value = decoder.read<Utf8View>();\\n\\uD83D\\uDFE9 396                    if (value.is_error()) {\\n\\uD83D\\uDFE9 397                        dbgln(\\\"UTF8 PrettyPrint error: {}\\\", value.error());\\n\\uD83D\\uDFE9 398                        return;\\n\\uD83D\\uDFE9 399                    }\\n\\uD83D\\uDFE9 400                    builder.append(' ');\\n\\uD83D\\uDFE9 401                    for (auto cp : value.value())\\n\\uD83D\\uDFE9 402                        builder.append_code_point(cp);\\n\\uD83D\\uDFE9 403                    break;\\n\\uD83D\\uDFE9 404                }\\n\\uD83D\\uDFE9 405                case Kind::Sequence:\\n\\uD83D\\uDFE9 406                case Kind::Set:\\n\\uD83D\\uDFE9 407                    dbgln(\\\"Seq/Sequence PrettyPrint error: Unexpected Primtive\\\");\\n\\uD83D\\uDFE9 408                    return;\\n\\uD83D\\uDFE9 409                }\\n\\uD83D\\uDFE9 410            }\\n\\uD83D\\uDFE9 411    \\n\\uD83D\\uDFE9 412            builder.append('\\\\n');\\n\\uD83D\\uDFE9 413            stream.write(builder.string_view().bytes());\\n\\uD83D\\uDFE9 414        }\\n\\uD83D\\uDFE9 415    }\\n\\uD83D\\uDFE9 416    \\n\\u2B1C 417    }\\n\\u2B1C 418    \\n\\u2B1C 419    void AK::Formatter<Crypto::ASN1::DecodeError>::format(FormatBuilder& fmtbuilder, Crypto::ASN1::DecodeError error)\\n\")), mdx(\"br\", null), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 Userland/Libraries/LibCrypto/ASN1/DER.h  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-h\"\n  }), \"\\u2B1C 220        Optional<Tag> m_current_tag;\\n\\u2B1C 221    };\\n\\u2B1C 222    \\n\\uD83D\\uDFE9 223    void pretty_print(Decoder&, OutputStream&, int indent = 0);\\n\\uD83D\\uDFE9 224    \\n\\u2B1C 225    }\\n\\u2B1C 226    \\n\\u2B1C 227    template<>\\n\")), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This file was generated by Swimm. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://swimm.io/link?l=c3dpbW0lM0ElMkYlMkZyZXBvcyUyRmxySG5JSlhzMmRMUWhEUjhTRExKJTJGZG9jcyUyRnhmbGxnY1pzMmoxbzNJbGNNRFc1\"\n  }), \"Click here to view it in the app\"), \". Timestamp: 2021-04-20T11:35:11.063Z\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#files-used","title":"Files Used:"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"xfllgcZs2j1o3IlcMDW5.md","fields":null},"frontmatter":{"metaTitle":null,"showMetadata":null,"editable":null,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"master"},"gitCommit":{"hash":"0cb17677e25377d6041a73fa8033496a1bb1ce03","date":"2021-04-21 03:46"}},"pageContext":{"id":"74df6b58-ef64-5daa-807c-19bfc55b534e"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","3812332637","3812332637"]}
{"componentChunkName":"component---src-templates-docs-js","path":"/bjzL5okWVxc0jxX6HPE5","result":{"data":{"site":{"siteMetadata":{"title":"My BooGi App","docsLocation":"","docsLocationType":"","editable":true}},"mdx":{"fields":{"id":"e5f3a528-fe0c-567a-a8b8-01a3688b2b8f","title":"Creating a frontend unit test","slug":"/bjzL5okWVxc0jxX6HPE5"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Creating a frontend unit test\",\n  \"editable\": false\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"div\", {\n    align: \"center\",\n    style: {\n      \"backgroundColor\": \"#e5ecff\"\n    }\n  }, \"    \", mdx(\"br\", null), \"    \", mdx(\"div\", null, \"DOC\"), \"    \", mdx(\"h1\", null, \"Creating a frontend unit test\"), \"    \", mdx(\"br\", null), \"  \"), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Files Used:\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 src/app/common/mixins/unitForm.js\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"\\uD83D\\uDCC4 src/app/tests/common/mixins/unitForm.spec.js\"), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"As you already know, tests are important. In the FE we don't want to test the actual rendering because it changes very frequently, but we do want to test the logic behind it.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In this walkthrough you will learn the steps for creating a unit test for a function in a FE component.\\nIn our case we will add a test for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"deleteHunk\"), \" function in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unitForm\"), \" mixin.\\nthe function should remove a hunk snippet by an index in a specific file.\"), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This is the function that we will test. It's here just as a reference\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/common/mixins/unitForm.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\uD83D\\uDFE9 216        deleteCell(cellIndex) {\\n\\uD83D\\uDFE9 217          // keep original data for recover\\n\\uD83D\\uDFE9 218          const deletedCell = this.swm.content.splice(cellIndex, 1)[0];\\n\\uD83D\\uDFE9 219          this.addSnippetIndex = cellIndex;\\n\\uD83D\\uDFE9 220          this.logUpdateHunkChanges({ action: 'delete', applicability: deletedCell.applicability });\\n\\uD83D\\uDFE9 221          this.$toasted.show(`${deletedCell.type === 'snippet' ? 'Snippet' : 'Text Block'} deleted`, {\\n\\uD83D\\uDFE9 222            theme: 'toasted-primary',\\n\\uD83D\\uDFE9 223            position: 'top-right',\\n\\uD83D\\uDFE9 224            duration: 4000,\\n\\uD83D\\uDFE9 225            action: {\\n\\uD83D\\uDFE9 226              text: 'Cancel',\\n\\uD83D\\uDFE9 227              onClick: (e, toastObject) => {\\n\\uD83D\\uDFE9 228                toastObject.goAway(0);\\n\\uD83D\\uDFE9 229                this.addCellInSpecificIndex(deletedCell, cellIndex);\\n\\uD83D\\uDFE9 230              },\\n\\uD83D\\uDFE9 231            },\\n\\uD83D\\uDFE9 232          });\\n\\uD83D\\uDFE9 233          // if the last cell was snippet and it was deleted - add an empty text block\\n\\uD83D\\uDFE9 234          // can be true only in docs\\n\\uD83D\\uDFE9 235          if (this.swm.content.length === 0) {\\n\\uD83D\\uDFE9 236            this.swm.content.push({ type: 'text', text: '' });\\n\\uD83D\\uDFE9 237          }\\n\\uD83D\\uDFE9 238        },\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In this step we declare what we are going to test.\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/tests/common/mixins/unitForm.spec.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\u2B1C 13     \\n\\u2B1C 14     describe('unitForm', () => {\\n\\u2B1C 15       describe('deleteCell', () => {\\n\\uD83D\\uDFE9 16         it('should remove a snippet from the content', async () => {\\n\\u2B1C 17           const route = {\\n\\u2B1C 18             params: {\\n\\u2B1C 19               unitId: 123,\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"First we declare the current app route with relevant params needed for initializing our component and test. \"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/tests/common/mixins/unitForm.spec.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\u2B1C 14     describe('unitForm', () => {\\n\\u2B1C 15       describe('deleteCell', () => {\\n\\u2B1C 16         it('should remove a snippet from the content', async () => {\\n\\uD83D\\uDFE9 17           const route = {\\n\\uD83D\\uDFE9 18             params: {\\n\\uD83D\\uDFE9 19               unitId: 123,\\n\\uD83D\\uDFE9 20               repoId: 456,\\n\\uD83D\\uDFE9 21             },\\n\\uD83D\\uDFE9 22             query: {},\\n\\uD83D\\uDFE9 23           };\\n\\u2B1C 24     \\n\\u2B1C 25           let wrapper = shallowMount(unitForm, { mocks: { $route: route, $toasted: { show: () => true } } });\\n\\u2B1C 26     \\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In this step we mount the component (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"unitForm\"), \") and we set the component data required for the test.\\nNote that we had to mock the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$toasted\"), \" component for the component to successfully mount.\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/tests/common/mixins/unitForm.spec.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\u2B1C 22             query: {},\\n\\u2B1C 23           };\\n\\u2B1C 24     \\n\\uD83D\\uDFE9 25           let wrapper = shallowMount(unitForm, { mocks: { $route: route, $toasted: { show: () => true } } });\\n\\uD83D\\uDFE9 26     \\n\\uD83D\\uDFE9 27           await wrapper.setData({\\n\\uD83D\\uDFE9 28             swm: {\\n\\uD83D\\uDFE9 29               content: [\\n\\uD83D\\uDFE9 30                 {\\n\\uD83D\\uDFE9 31                   path: '0.js',\\n\\uD83D\\uDFE9 32                 },\\n\\uD83D\\uDFE9 33                 {\\n\\uD83D\\uDFE9 34                   path: '1.js',\\n\\uD83D\\uDFE9 35                 },\\n\\uD83D\\uDFE9 36                 {\\n\\uD83D\\uDFE9 37                   path: '2.js',\\n\\uD83D\\uDFE9 38                 },\\n\\uD83D\\uDFE9 39                 {\\n\\uD83D\\uDFE9 40                   path: '3.js',\\n\\uD83D\\uDFE9 41                 },\\n\\uD83D\\uDFE9 42               ],\\n\\uD83D\\uDFE9 43             },\\n\\uD83D\\uDFE9 44           });\\n\\u2B1C 45     \\n\\u2B1C 46           wrapper.vm.deleteCell(2); // removing 2.js\\n\\u2B1C 47     \\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In this step we call the function that we wish to test.\\nNote that we call \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"wrapper.vm\"), \" and not just \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"wrapper\")), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/tests/common/mixins/unitForm.spec.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\u2B1C 43             },\\n\\u2B1C 44           });\\n\\u2B1C 45     \\n\\uD83D\\uDFE9 46           wrapper.vm.deleteCell(2); // removing 2.js\\n\\u2B1C 47     \\n\\u2B1C 48           expect(wrapper.vm.swm.content.length).toBe(3);\\n\\u2B1C 49           expect(wrapper.vm.swm.content[2].path).toBe('3.js');\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Finally we can call the  \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"expect\"), \" functions to verify that the data changed as expected.\"), mdx(\"div\", {\n    style: {\n      \"background\": \"#e5ecff\",\n      \"padding\": \"10px 10px 10px 10px\",\n      \"borderBottom\": \"1px solid #c1c7d0\",\n      \"borderRadius\": \"4px\"\n    }\n  }, \"    \\uD83D\\uDCC4 src/app/tests/common/mixins/unitForm.spec.js  \"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"\\u2B1C 45     \\n\\u2B1C 46           wrapper.vm.deleteCell(2); // removing 2.js\\n\\u2B1C 47     \\n\\uD83D\\uDFE9 48           expect(wrapper.vm.swm.content.length).toBe(3);\\n\\uD83D\\uDFE9 49           expect(wrapper.vm.swm.content[2].path).toBe('3.js');\\n\\u2B1C 50         });\\n\\u2B1C 51         it('when deleting the last cell, an empty text cell should be added', async () => {\\n\\u2B1C 52           const route = {\\n\")), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"In this walkthrough we verified that the function works correctly by verifying the component data but you can also check the component props data or expect mocks calls (e.g calling an adapter) \"), mdx(\"br\", null), mdx(\"br\", null), mdx(\"br\", null), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This file was generated by Swimm. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://swimm.io/link?l=c3dpbW0lM0ElMkYlMkZyZXBvcyUyRnZlZXp2eEN1enBQclJMTFhXRDJFJTJGZG9jcyUyRmJqekw1b2tXVnhjMGp4WDZIUEU1\"\n  }), \"Click here to view it in the app\"), \". Timestamp: 2021-04-20T19:12:42.826Z\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#files-used","title":"Files Used:"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"bjzL5okWVxc0jxX6HPE5.md","fields":null},"frontmatter":{"metaTitle":null,"showMetadata":null,"editable":false,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"master"},"gitCommit":{"hash":"0cb17677e25377d6041a73fa8033496a1bb1ce03","date":"2021-04-21 03:46"}},"pageContext":{"id":"e5f3a528-fe0c-567a-a8b8-01a3688b2b8f"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","3812332637","3812332637"]}